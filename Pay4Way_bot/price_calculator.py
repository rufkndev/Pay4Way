"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
"""

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∏—Ö —Ü–µ–Ω
DELIVERY_TYPES = {
    # "small_package": {
    #     "name": "–ú–∞–ª–µ–Ω—å–∫–∏–π –ø–∞–∫–µ—Ç",
    #     "weights": {
    #         1: 12.94,
    #         2: 18.5
    #     }
    # },
    # "standard_package": {
    #     "name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞–∫–µ—Ç", 
    #     "weights": {
    #         1: 19.04, 2: 22.69, 3: 24.23, 4: 26.16, 5: 27.7, 6: 29.24, 7: 30.78, 8: 32.78,
    #         9: 34.32, 10: 35.86, 11: 31.45, 12: 32.99, 13: 34.53, 14: 36.07, 15: 37.61,
    #         16: 39.15, 17: 40.69, 18: 42.23, 19: 43.77, 20: 45.31
    #     }
    # },
    "ems": {
        "name": "EMS",
        "weights": {
            0.5: 15.69, 1: 17.39, 1.5: 21.65, 2: 23.35, 2.5: 25.5, 3: 27.2, 3.5: 29.74,
            4: 31.44, 4.5: 33.59, 5: 35.29, 5.5: 37.44, 6: 39.14, 6.5: 41.29, 7: 42.99,
            7.5: 45.14, 8: 46.84
        }
    }
}

def calculate_item_price(original_price: float, delivery_type: str, weight: float, with_vat: bool = True) -> float:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ:
    (–®–∞–≥ 4 + –®–∞–≥ 5 + –®–∞–≥ 6) = (—Å—É–º–º–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏) + (—Å—É–º–º–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ * 0,15) + (—Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ –ù–î–° + –∫–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞) * 0.03
    
    Args:
        original_price (float): –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ Google Shopping
        delivery_type (str): –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ ('ems')
        weight (float): –í–µ—Å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–≥
        with_vat (bool): –° –ù–î–° –∏–ª–∏ –±–µ–∑ –ù–î–°
        
    Returns:
        float: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
        original_price_clean = extract_price_value(original_price)
        if original_price_clean is None:
            return 0.0
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ –≤–µ—Å–∞
        delivery_cost = get_delivery_cost(delivery_type, weight)
        if delivery_cost is None:
            return 0.0
        # –¶–µ–Ω–∞ –±–µ–∑ –ù–î–° (19%)
        price_without_vat = original_price_clean - (original_price_clean * 0.19)
        # –°–∫–ª–∞–¥—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –∏ —Ü–µ–Ω—É –±–µ–∑ –ù–î–°
        step3 = price_without_vat
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –†–§
        step4 = step3 + delivery_cost
        # –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ (15%)
        step5 = step4 * 0.15
        # –°—Ç—Ä–∞—Ö–æ–≤–æ–π —Å–±–æ—Ä (3% –æ—Ç —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ –ù–î–° + –∫–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ä–≤–∏—Å–∞, –Ω–æ –ù–ï –æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏)
        step6 = (price_without_vat + step5) * 0.03
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç: –®–∞–≥ 4 + –®–∞–≥ 5 + –®–∞–≥ 6
        calculated_price = step4 + step5 + step6
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–µ–∑ –ù–î–°, —É–±–∏—Ä–∞–µ–º –ù–î–° (20%)
        if not with_vat:
            calculated_price = calculated_price / 1.20
        return round(calculated_price, 2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ü–µ–Ω—ã: {e}")
        return 0.0


def extract_price_value(price_input) -> float:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ü–µ–Ω—ã
    
    Args:
        price_input: –¶–µ–Ω–∞ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (—Å—Ç—Ä–æ–∫–∞, —á–∏—Å–ª–æ, —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –≤–∞–ª—é—Ç)
        
    Returns:
        float: –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å
    """
    try:
        if isinstance(price_input, (int, float)):
            return float(price_input)
        
        price_str = str(price_input)
        # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç –∏ –ø—Ä–æ–±–µ–ª—ã
        price_str = price_str.replace('‚Ç¨', '').replace('$', '').replace('‚ÇΩ', '').replace(',', '.').strip()
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ç–æ—á–∫–∏
        price_clean = ''.join(c for c in price_str if c.isdigit() or c == '.')
        
        if price_clean:
            return float(price_clean)
        return None
        
    except (ValueError, TypeError):
        return None


def get_delivery_cost(delivery_type: str, weight: float) -> float:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ –≤–µ—Å–∞
    
    Args:
        delivery_type (str): –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
        weight (float): –í–µ—Å –≤ –∫–≥
        
    Returns:
        float: –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    """
    if delivery_type not in DELIVERY_TYPES:
        return None
    
    weights = DELIVERY_TYPES[delivery_type]["weights"]
    return weights.get(weight, None)


def get_available_weights(delivery_type: str) -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ—Å–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    
    Args:
        delivery_type (str): –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ—Å–æ–≤
    """
    if delivery_type not in DELIVERY_TYPES:
        return []
    
    return list(DELIVERY_TYPES[delivery_type]["weights"].keys())


def get_delivery_type_name(delivery_type: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    
    Args:
        delivery_type (str): –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
        
    Returns:
        str: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    """
    if delivery_type not in DELIVERY_TYPES:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
    
    return DELIVERY_TYPES[delivery_type]["name"]


def calculate_cart_total(original_price: float, delivery_type: str, weight: float, with_vat: bool = True) -> dict:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –¥–ª—è –æ–¥–Ω–æ–π —Ü–µ–Ω—ã)
    Args:
        original_price (float): –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
        delivery_type (str): –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
        weight (float): –í–µ—Å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–≥
        with_vat (bool): –° –ù–î–° –∏–ª–∏ –±–µ–∑ –ù–î–°
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á–µ—Ç–∞ –≤–∫–ª—é—á–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å–±–æ—Ä
    """
    price_with_vat = calculate_item_price(original_price, delivery_type, weight, True)
    price_without_vat = calculate_item_price(original_price, delivery_type, weight, False)
    delivery_cost = get_delivery_cost(delivery_type, weight)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –∫–∞–∂–¥—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é
    original_price_clean = extract_price_value(original_price)
    item_price_without_vat = original_price_clean - (original_price_clean * 0.19)
    service_fee = (item_price_without_vat + delivery_cost) * 0.15
    insurance_fee = (item_price_without_vat + service_fee) * 0.03
    
    savings = price_with_vat - price_without_vat
    return {
        'total': price_with_vat,
        'service_fee': service_fee,
        'insurance_fee': insurance_fee,
        'savings': savings,
        'delivery_cost': delivery_cost
    }


def format_price_display(price: float, currency: str = "‚Ç¨") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        price (float): –¶–µ–Ω–∞
        currency (str): –°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
    """
    return f"{currency}{price:.2f}"


def get_detailed_price_breakdown(cart_items: list, delivery_type: str, weight: float) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É —Ü–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        cart_items (list): –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
        delivery_type (str): –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
        weight (float): –í–µ—Å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–≥
        
    Returns:
        str: –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ —Ü–µ–Ω
    """
    if not cart_items:
        return "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
    
    calculation_result = calculate_cart_total(cart_items[0]['price'], delivery_type, weight)
    delivery_type_name = get_delivery_type_name(delivery_type)
    delivery_cost = calculation_result['delivery_cost']
    service_commission = calculation_result['service_fee']
    insurance_fee = calculation_result['insurance_fee']
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –ù–î–°
    total_original_price = sum(extract_price_value(item.get('price', 0)) or 0 for item in cart_items)
    total_price_without_vat = total_original_price - (total_original_price * 0.19)
    
    breakdown = f"""
üìä **–í–∞—à –∑–∞–∫–∞–∑:**

üõçÔ∏è **–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ ({len(cart_items)} —à—Ç.):**
   üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ‚Ç¨{total_original_price:.2f} –∑–∞ –≤—ã—á–µ—Ç–æ–º –ù–î–° (–ê –º–æ–≥–ª–∞ –±—ã—Ç—å ‚Ç¨{total_original_price:.2f} —Å –ù–î–°)

üöö **–î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏ –¥–æ –†–§:**
   üì¶ –¢–∏–ø: {delivery_type_name}
   ‚öñÔ∏è –í–µ—Å: {weight} –∫–≥
   üí∂ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ‚Ç¨{delivery_cost:.2f}

üíº **–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ (15%):** ‚Ç¨{service_commission:.2f}

üõ°Ô∏è **–°—Ç—Ä–∞—Ö–æ–≤–æ–π —Å–±–æ—Ä (3%):** ‚Ç¨{insurance_fee:.2f}

üí∞ **–ò–¢–û–ì–û: {format_price_display(calculation_result['total'])}**
"""
    
    return breakdown 
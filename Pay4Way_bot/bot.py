import os
import asyncio
import logging
from typing import Tuple
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
from services.scrapingbee_service import search_idealo_products
from services.currency_service import currency_service, CurrencyService
from services.google_sheets_service import GoogleSheetsService
from price_calculator import calculate_cart_total, format_price_display, get_delivery_type_name, get_delivery_cost
from keyboards import (
    get_help_keyboard, 
    get_product_navigation_keyboard,
    get_cart_reply_keyboard, get_main_reply_keyboard,
    get_delivery_type_keyboard, get_delivery_type_keyboard_for_calculation, get_weight_keyboard, get_weight_keyboard_for_order, get_payment_method_keyboard, get_order_confirmation_keyboard,
    get_price_calculation_keyboard, get_cancel_price_calculation_keyboard, get_back_keyboard, get_add_to_cart_from_calculation_keyboard
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤
from order_handlers import (
    OrderStates, 
    process_name, 
    process_phone_number, 
    process_email, 
    process_address, 
    restart_order,
    confirm_order_callback
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã

# –°–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    sheets_service = GoogleSheetsService()
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets —Å–µ—Ä–≤–∏—Å–∞: {e}")
    sheets_service = None

# Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def log_user_action(user_id: int, username: str, action: str):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    if sheets_service:
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
            asyncio.create_task(log_user_action_background(user_id, username, action))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

async def log_user_action_background(user_id: int, username: str, action: str):
    """–§–æ–Ω–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, sheets_service.log_user_action, user_id, username, action)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

from formatting_utils import format_price_with_rub, format_total_with_savings

def parse_weight_callback_data(callback_data: str) -> Tuple[str, float]:
    """
    –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç callback_data –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–µ—Å–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (delivery_type, weight)
    """
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "weight_"
    data_part = callback_data.replace("weight_", "")
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–¥–µ–ª—è–µ—Ç delivery_type –æ—Ç weight
    last_underscore_index = data_part.rfind('_')
    if last_underscore_index == -1:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
    
    delivery_type = data_part[:last_underscore_index]
    weight_str = data_part[last_underscore_index + 1:]
    
    try:
        weight = float(weight_str)
    except ValueError:
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å '{weight_str}' –≤ —á–∏—Å–ª–æ")
    
    return delivery_type, weight

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class SearchStates(StatesGroup):
    waiting_for_query = State()
    showing_results = State()

class ProductStates(StatesGroup):
    waiting_for_action = State()

class PriceCalculationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã"""
    waiting_for_original_price = State()
    waiting_for_delivery_type = State()
    waiting_for_weight = State()
    waiting_for_product_link = State()
    waiting_for_product_features = State()
    showing_result = State()

class CartStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    waiting_for_quantity_search = State()    # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø–æ–∏—Å–∫–∞
    waiting_for_quantity_calculated = State()  # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    waiting_for_custom_quantity_search = State()  # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø–æ–∏—Å–∫–∞
    waiting_for_custom_quantity_calculated = State()  # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_results = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è URL —Ç–æ–≤–∞—Ä–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
product_urls = {}


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await log_user_action(message.from_user.id, message.from_user.username, "–ö–æ–º–∞–Ω–¥–∞ /start")
    welcome_text = """
üíØ Pay4Way ‚Äî —Å–µ—Ä–≤–∏—Å ‚Ññ1 –≤ –†–æ—Å—Å–∏–∏ –¥–ª—è –≤—ã–≥–æ–¥–Ω—ã—Ö –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫!

–ú—ã ‚Äî –ø–µ—Ä–≤—ã–µ –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ, –∫—Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –ï–≤—Ä–æ–ø—ã üá™üá∫ –±–µ–∑ —É–ø–ª–∞—Ç—ã –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–≥–æ –ù–î–°. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ 19% —É–∂–µ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–∫—É–ø–∫–∏! 

–ü–æ–∫—É–ø–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ª—é–±–æ–π —Ç–æ–≤–∞—Ä –∏–∑ –ï–≤—Ä–æ–ø—ã ([–ø–µ—Ä–µ—á–µ–Ω—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π](https://pay4way.ru/ogranichenia)), –∞ –º—ã –¥–æ—Å—Ç–∞–≤–∏–º üöõ‚úàÔ∏èüöÑ–µ–≥–æ –≤ –†–æ—Å—Å–∏—é –±—ã—Å—Ç—Ä–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π!

üìÜ –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –≤–∞—à–µ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ü–æ—á—Ç—ã –†–§: 3-4 –Ω–µ–¥–µ–ª–∏
    
üí¨ –ù–∞—á–Ω–∏—Ç–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, –∫–∞–∫ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏ —É–¥–æ–±–Ω–æ
"""

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ü–æ–µ—Ö–∞–ª–∏", callback_data="start_go")]
        ]
    )

    await message.answer(welcome_text, reply_markup=inline_kb, parse_mode="Markdown")

@dp.callback_query(lambda c: c.data == "start_go")
async def on_go_clicked(callback: types.CallbackQuery):
    await log_user_action(callback.from_user.id, callback.from_user.username, "–ö–Ω–æ–ø–∫–∞: –ü–æ–µ—Ö–∞–ª–∏")
    await callback.message.edit_reply_markup()  # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    await callback.message.answer("üöÄ", reply_markup=get_main_reply_keyboard())
    await callback.answer()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Reply-–∫–Ω–æ–ø–æ–∫

@dp.message(lambda message: message.text == "üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤")
async def search_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    await log_user_action(message.from_user.id, message.from_user.username, "–ö–Ω–æ–ø–∫–∞: –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤")
    current_data = await state.get_data()
    cart = current_data.get('cart', [])
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await state.set_data({'cart': cart})
    await state.set_state(SearchStates.waiting_for_query)
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, Nike zoom):")
    await message.answer("üîç")
    
@dp.callback_query(lambda c: c.data == "start_search")
async def start_search_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞"""
    await log_user_action(callback.from_user.id, callback.from_user.username, "–ö–Ω–æ–ø–∫–∞: –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫")
    await state.set_state(SearchStates.waiting_for_query)
    await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, Nike zoom):")
    await callback.message.answer("üîç")

@dp.message(lambda message: message.text == "‚ùì –ö—Ç–æ –º—ã")
async def about_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å"""
    await log_user_action(message.from_user.id, message.from_user.username, "–ö–Ω–æ–ø–∫–∞: –ö—Ç–æ –º—ã")
    current_data = await state.get_data()
    cart = current_data.get('cart', [])
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await state.set_data({'cart': cart})
    text = """
–ö—Ç–æ –º—ã?

–ú—ã ‚Äì —á–µ—à—Å–∫–æ–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ. 
–ù–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:
KPSports s.r.o. 
IƒåO 22332294
Kotkova 50/16, Liberec XIV-Ruprechtice, 460 14 Liberec

–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å –º–æ–∂–Ω–æ –≤ [—Ä–µ–µ—Å—Ç—Ä–µ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —é—Å—Ç–∏—Ü–∏–∏ –ß–µ—à—Å–∫–æ–π –†–µ—Å–ø—É–±–ª–∏–∫–∏](https://msp.gov.cz/), —É–∫–∞–∑–∞–≤ –Ω–∞—à –ò–ù–ù (IƒåO). 


"""
    await message.answer(text, parse_mode="Markdown")

@dp.message(lambda message: message.text == "üö® –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def contacts_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
    await log_user_action(message.from_user.id, message.from_user.username, "–ö–Ω–æ–ø–∫–∞: –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    current_data = await state.get_data()
    cart = current_data.get('cart', [])
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await state.set_data({'cart': cart})
    
    text = """üö® –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º:

üìß Email:
support@pay4way.ru

üì±Telegram:
@pay4way_support

üåê –°–∞–π—Ç:
https://pay4way.ru"""
    await message.answer(text)


@dp.message(lambda message: message.text == "üõç –ö–æ—Ä–∑–∏–Ω–∞")
async def cart_handler(message: types.Message, state: FSMContext):
    await log_user_action(message.from_user.id, message.from_user.username, "–ö–Ω–æ–ø–∫–∞: –ö–æ—Ä–∑–∏–Ω–∞")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_data = await state.get_data()
    cart = current_data.get('cart', [])
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await state.set_data({'cart': cart})
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logging.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã. –†–∞–∑–º–µ—Ä –∫–æ—Ä–∑–∏–Ω—ã: {len(cart)}")
    for i, item in enumerate(cart):
        logging.info(f"–¢–æ–≤–∞—Ä {i+1}: {item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50]}")
    
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    no_cart_text = "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!\n\n" 
    delivery_cost_to_warehouse = 5.00

    if not cart:
        await message.answer(no_cart_text)
        return

    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—É–º–º—ã
    total_euro = 0
    total_rub = 0

    for i, product in enumerate(cart):
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        quantity = product.get('quantity', 1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cart_text += f"–¢–æ–≤–∞—Ä #{i+1} (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.)\n\n"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        price_without_vat = product.get('original_price_without_vat', 0)
        if price_without_vat == 0:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ —Ü–µ–Ω—ã
            price = product.get('price', 0)
            if isinstance(price, str):
                price = price.replace('‚Ç¨', '').replace('$', '').replace('‚ÇΩ', '').replace(',', '.').strip()
            try:
                price_with_vat = float(price)
                price_without_vat = round(price_with_vat * 0.81, 2)
            except Exception:
                price_without_vat = 0.0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        total_price_without_vat = price_without_vat * quantity
        rub_price_without_vat = currency_service.convert_price(total_price_without_vat)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ —Å–∫–ª–∞–¥–∞ –≤ —Ä—É–±–ª—è—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
        rub_delivery_to_warehouse_value = currency_service.convert_price(delivery_cost_to_warehouse)
        rub_delivery_to_warehouse = f"{rub_delivery_to_warehouse_value:,.0f}".replace(',', ' ')
        
        cart_text += (
            f"ü™ô –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤: ‚Ç¨{total_price_without_vat:.2f} –∏–ª–∏ {f'{rub_price_without_vat:,.0f}'.replace(',', ' ')}‚ÇΩ (–º—ã —É–∂–µ –≤—ã—á–ª–∏ –ù–î–°)\n"
            f"   ‚îú –ó–∞ –µ–¥–∏–Ω–∏—Ü—É: ‚Ç¨{price_without_vat:.2f} √ó {quantity} —à—Ç.\n\n"
        )
        cart_text += (
            f"üöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ –Ω–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏: ‚Ç¨{delivery_cost_to_warehouse:.2f} –∏–ª–∏ {rub_delivery_to_warehouse}‚ÇΩ\n\n"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_type = product.get('delivery_type', '–ú–∞–ª–µ–Ω—å–∫–∏–π –ø–∞–∫–µ—Ç')
        weight = product.get('weight', 1.0)
        delivery_cost_from_germany = product.get('delivery_cost_from_germany', 12.94)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏ –≤ —Ä—É–±–ª—è—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
        rub_delivery_from_germany_value = currency_service.convert_price(delivery_cost_from_germany)
        rub_delivery_from_germany = f"{rub_delivery_from_germany_value:,.0f}".replace(',', ' ')
        cart_text += (
            f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏ –¥–æ –†–§:\n\n"
            f"–¢–∏–ø: {delivery_type}\n"
            f"–í–µ—Å: {weight} –∫–≥\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ‚Ç¨{delivery_cost_from_germany:.2f} –∏–ª–∏ {rub_delivery_from_germany}‚ÇΩ\n\n"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if product.get('service_commission') and product.get('total'):
            service_commission_per_unit = product.get('service_commission')
            total_per_unit = product.get('total')
            service_commission = service_commission_per_unit * quantity
            total = total_per_unit * quantity
        else:
            subtotal = total_price_without_vat + delivery_cost_to_warehouse + delivery_cost_from_germany
            service_commission = round(subtotal * 0.15, 2)
            total = round(subtotal + service_commission, 2)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é —Å–µ—Ä–≤–∏—Å–∞ –≤ —Ä—É–±–ª—è—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
        rub_service_commission_value = currency_service.convert_price(service_commission)
        rub_service_commission = f"{rub_service_commission_value:,.0f}".replace(',', ' ')
        cart_text += (
            f"üíº –ö–æ–º–∏—Å—Å–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (15%): ‚Ç¨{service_commission:.2f} –∏–ª–∏ {rub_service_commission}‚ÇΩ\n\n"
        )
        if product.get('link'):
            cart_text += f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {product['link']}\n\n"
        
        rub_total = currency_service.convert_price(total)
        cart_text += (
            f"üí∂ –ò–¢–û–ì–û –∑–∞ {quantity} —à—Ç.: ‚Ç¨{total:.2f} –∏–ª–∏ {f'{rub_total:,.0f}'.replace(',', ' ')}‚ÇΩ\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–∏–º —Å—É–º–º–∞–º
        total_euro += total
        total_rub += rub_total
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
        if i < len(cart) - 1:
            cart_text += "‚îÄ" * 30 + "\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ
    if len(cart) > 1:
        cart_text += "=" * 40 + "\n"
        cart_text += f"**–û–ë–©–ê–Ø –°–£–ú–ú–ê –ó–ê–ö–ê–ó–ê:**\n"
        cart_text += f"üí∂ ‚Ç¨{total_euro:.2f} –∏–ª–∏ {f'{total_rub:,.0f}'.replace(',', ' ')}‚ÇΩ\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    keyboard_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    for i in range(len(cart)):
        keyboard_buttons.append([InlineKeyboardButton(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä #{i+1}", callback_data=f"remove_item_{i}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard_buttons.append([
        InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"), 
        InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_from_cart")
    ])
    
    next_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await message.answer(cart_text, reply_markup=next_keyboard, parse_mode=None)



@dp.message(lambda message: message.text == "üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É")
async def start_price_calculation(message: types.Message, state: FSMContext):
    await log_user_action(message.from_user.id, message.from_user.username, "–ö–Ω–æ–ø–∫–∞: –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_data = await state.get_data()
    cart = current_data.get('cart', [])
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await state.set_data({'cart': cart})
    
    await state.set_state(PriceCalculationStates.waiting_for_original_price)
    await message.answer("üí∞–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")

@dp.message(PriceCalculationStates.waiting_for_original_price)
async def input_original_price(message: types.Message, state: FSMContext):
    await log_user_action(message.from_user.id, message.from_user.username, f"–í–≤–æ–¥ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞: {message.text}")
    try:
        original_price = float(message.text.replace('‚Ç¨', '').replace(',', '.').strip())
        await state.update_data(original_price=original_price)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ 200 –µ–≤—Ä–æ
        if original_price > 200:
            await message.answer(
                "‚ÄºÔ∏è –í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –†–§, –µ—Å–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π –ø–æ–∫—É–ø–∫–∏ –±–æ–ª–µ–µ 200‚Ç¨ (–±–µ–∑ —É—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞), —Ç–æ –≤–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ø–ª–∞—Ç–∏—Ç—å —Ç–∞–º–æ–∂–µ–Ω–Ω—É—é –ø–æ—à–ª–∏–Ω—É –≤ —Ä–∞–∑–º–µ—Ä–µ 15% –Ω–∞ —Ä–∞–∑–Ω–∏—Ü—É —Å—É–º–º—ã, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ:\n\n"
                "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ * 15%\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "300‚Ç¨ (—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞) - 200‚Ç¨ (–±–µ—Å–ø–æ—à–ª–∏–Ω–Ω—ã–π –ø–æ—Ä–æ–≥) = 100 * 0.15 = 15‚Ç¨\n\n"
                "–ü–æ—à–ª–∏–Ω–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç 15‚Ç¨.\n\n"
                "–£–ø–ª–∞—Ç–∏—Ç—å –µ–µ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ –≤ —Ä—É–±–ª—è—Ö –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏ –ø–æ—á—Ç—ã –†–§ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞."
            )
        await state.set_state(PriceCalculationStates.waiting_for_delivery_type)
        await message.answer("‚úÖ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –æ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ –Ω–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏ ‚Ç¨5.00, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ —Ç–∞—Ä–∏—Ñ –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
                             "‚ùóÔ∏è –ï—Å–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è, —Ç–æ –º—ã —É–º–µ–Ω—å—à–∏–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ ‚Ç¨5.00. –ï—Å–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–æ–ª–µ–µ ‚Ç¨5.00, —Ç–æ –º—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ —ç—Ç—É —Å—É–º–º—É.\n\n"
                             "üöö –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏ –¥–æ –†–æ—Å—Å–∏–∏:", reply_markup=get_delivery_type_keyboard_for_calculation())
    except Exception:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É!")

@dp.callback_query(lambda c: c.data.startswith("delivery_"), StateFilter(PriceCalculationStates.waiting_for_delivery_type))
async def choose_delivery_type(callback: types.CallbackQuery, state: FSMContext):
    await log_user_action(callback.from_user.id, callback.from_user.username, f"–ö–Ω–æ–ø–∫–∞: –í—ã–±–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ {callback.data}")
    await callback.answer()
    delivery_type = callback.data.replace("delivery_", "")
    await state.update_data(delivery_type=delivery_type)
    await state.set_state(PriceCalculationStates.waiting_for_weight)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_weight_keyboard(delivery_type))

@dp.callback_query(lambda c: c.data.startswith("weight_"), StateFilter(PriceCalculationStates.waiting_for_weight))
async def choose_weight(callback: types.CallbackQuery, state: FSMContext):
    await log_user_action(callback.from_user.id, callback.from_user.username, f"–ö–Ω–æ–ø–∫–∞: –í—ã–±–æ—Ä –≤–µ—Å–∞ {callback.data}")
    await callback.answer()
    try:
        delivery_type, weight = parse_weight_callback_data(callback.data)
    except ValueError as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    await state.update_data(weight=weight)
    data = await state.get_data()
    delivery_cost_to_warehouse = 5.00
    result = calculate_cart_total(
        original_price=data['original_price'],
        delivery_type=delivery_type,
        weight=weight,
    )
    delivery_cost = get_delivery_cost(delivery_type, weight)
    original_price_without_vat = data['original_price'] * 0.81
    original_price_with_vat = data['original_price']
    rub_total = currency_service.convert_price(result['total'])
    rub_original_price_without_vat = currency_service.convert_price(data['original_price'] * 0.81)
    service_commission_amount = (original_price_without_vat + delivery_cost_to_warehouse + delivery_cost) * 0.15
    insurance_fee_amount = (original_price_without_vat + service_commission_amount) * 0.03
    final_price_without_vat = original_price_without_vat + delivery_cost_to_warehouse + delivery_cost + service_commission_amount + insurance_fee_amount
    final_rub_total = currency_service.convert_price(final_price_without_vat)
    final_price_with_vat = final_price_without_vat * 1.19
    await state.set_state(PriceCalculationStates.waiting_for_product_link)
    # –í—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
    rub_delivery_cost_to_warehouse_value = currency_service.convert_price(delivery_cost_to_warehouse)
    rub_delivery_cost_to_warehouse = f"{rub_delivery_cost_to_warehouse_value:,.0f}".replace(',', ' ')
    
    rub_delivery_cost_value = currency_service.convert_price(delivery_cost)
    rub_delivery_cost = f"{rub_delivery_cost_value:,.0f}".replace(',', ' ')
    
    rub_service_commission_value = currency_service.convert_price(service_commission_amount)
    rub_service_commission = f"{rub_service_commission_value:,.0f}".replace(',', ' ')
    
    rub_insurance_fee_value = currency_service.convert_price(insurance_fee_amount)
    rub_insurance_fee = f"{rub_insurance_fee_value:,.0f}".replace(',', ' ')
    
    savings_amount = original_price_with_vat - original_price_without_vat
    rub_savings_value = currency_service.convert_price(savings_amount)
    rub_savings = f"{rub_savings_value:,.0f}".replace(',', ' ')
    await callback.message.answer(
        "*–†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏*\n\n"
        f"ü™ô –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤: ‚Ç¨{original_price_without_vat:.2f} –∏–ª–∏ {f'{rub_original_price_without_vat:,.0f}'.replace(',', ' ')}‚ÇΩ (–º—ã —É–∂–µ –≤—ã—á–ª–∏ –ù–î–°)\n\n"
        f"üöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ –Ω–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏: ‚Ç¨{delivery_cost_to_warehouse:.2f} –∏–ª–∏ {rub_delivery_cost_to_warehouse}‚ÇΩ\n\n"
        f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏ –¥–æ –†–§:\n–¢–∏–ø: {get_delivery_type_name(delivery_type)}\n–í–µ—Å: {weight} –∫–≥\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ‚Ç¨{delivery_cost:.2f} –∏–ª–∏ {rub_delivery_cost}‚ÇΩ\n\n"
        f"üíº –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ (15%): ‚Ç¨{service_commission_amount:.2f} –∏–ª–∏ {rub_service_commission}‚ÇΩ\n\n"
        f"üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–æ–π —Å–±–æ—Ä (3%): ‚Ç¨{insurance_fee_amount:.2f} –∏–ª–∏ {rub_insurance_fee}‚ÇΩ\n\n"
        f"üí∂ –ò–¢–û–ì–û: ‚Ç¨{final_price_without_vat:.2f} –∏–ª–∏ {f'{final_rub_total:,.0f}'.replace(',', ' ')}‚ÇΩ\n\n" 
        f"*–≠–∫–æ–Ω–æ–º–∏—è —Å–æ—Å—Ç–∞–≤–∏–ª–∞ ‚Ç¨{savings_amount:.2f} –∏–ª–∏ {rub_savings}‚ÇΩ –∑–∞ —Å—á—ë—Ç –≤—ã—á–µ—Ç–∞ –Ω–∞–º–∏ —Å—É–º–º—ã –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–≥–æ –ù–î–°*\n\n"
        f"üîó –ï—Å–ª–∏ –í–∞—Å –≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:",
        parse_mode="Markdown"
    )
    

@dp.message(PriceCalculationStates.waiting_for_product_link)
async def input_product_link(message: types.Message, state: FSMContext):
    await log_user_action(message.from_user.id, message.from_user.username, f"–í–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä: {message.text[:100]}")
    product_link = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞
    if not product_link.startswith(('http://', 'https://')):
        await message.answer(
            "‚ùå *–û—à–∏–±–∫–∞!* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.\n"
            "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://\n\n"
            "–ü—Ä–∏–º–µ—Ä: https://www.amazon.de/product/123",
            parse_mode="Markdown"
        )
        return
    
    await state.update_data(product_link=product_link)
    await state.set_state(PriceCalculationStates.waiting_for_product_features)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –æ—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ (–∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞): —Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")

@dp.message(PriceCalculationStates.waiting_for_product_features)
async def input_product_features(message: types.Message, state: FSMContext):
    await log_user_action(message.from_user.id, message.from_user.username, f"–í–≤–æ–¥ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ç–æ–≤–∞—Ä–∞: {message.text}")
    features = message.text.strip()
    await state.update_data(product_features=features)
    await state.set_state(PriceCalculationStates.showing_result)
    await message.answer(
            "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –Ω–∞–∂–º–∏—Ç–µ \"–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É\"",
        reply_markup=get_add_to_cart_from_calculation_keyboard()
    )

@dp.callback_query(lambda c: c.data == "calculate_price_again_product")
async def calculate_price_again_product(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_data = await state.get_data()
    cart = current_data.get('cart', [])
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await state.set_data({'cart': cart})
    
    await state.set_state(PriceCalculationStates.waiting_for_original_price)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ :", reply_markup=get_cancel_price_calculation_keyboard())


@dp.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""
    await log_user_action(message.from_user.id, message.from_user.username, "–ö–Ω–æ–ø–∫–∞: –ù–∞–∑–∞–¥")
    current_data = await state.get_data()
    cart = current_data.get('cart', [])
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await state.set_data({'cart': cart})
    
    welcome_text = """
üéâ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Pay4Way!
üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:

‚Äî üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ï–≤—Ä–æ–ø—ã
‚Äî üõç –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
‚Äî üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
‚Äî üí∏ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
‚Äî ‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
‚Äî üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
‚Äî üè¢ –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ 

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üëá
"""
    await message.answer(welcome_text, reply_markup=get_main_reply_keyboard())
    await message.answer("‚¨ÖÔ∏è")





@dp.callback_query(lambda c: c.data == "cart_next")
async def cart_next_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
    data = await state.get_data()
    cart = data.get('cart', [])
    if not cart:
        await callback.message.edit_text(
            "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø–æ–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏!",
            reply_markup=get_back_keyboard()
        )
        return
    cart_text = ""
    delivery_cost_to_warehouse = 5.00
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—É–º–º—ã
    total_euro = 0
    total_rub = 0
    
    for i, product in enumerate(cart):
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞
        cart_text += f"–¢–æ–≤–∞—Ä #{i+1}\n"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        price_without_vat = product.get('original_price_without_vat', 0)
        if price_without_vat == 0:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ —Ü–µ–Ω—ã
            price = product.get('price', 0)
            if isinstance(price, str):
                price = price.replace('‚Ç¨', '').replace('$', '').replace('‚ÇΩ', '').replace(',', '.').strip()
            try:
                price_with_vat = float(price)
                price_without_vat = round(price_with_vat * 0.81, 2)
            except Exception:
                price_without_vat = 0.0
        
        rub_price_without_vat = currency_service.convert_price(price_without_vat)
        cart_text += (
            f"ü™ô –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤: ‚Ç¨{price_without_vat} –∏–ª–∏ {f'{rub_price_without_vat:,.0f}'.replace(',', ' ')}‚ÇΩ (–º—ã —É–∂–µ –≤—ã—á–ª–∏ –ù–î–°)\n\n"
        )
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
        rub_delivery_to_warehouse_value = currency_service.convert_price(delivery_cost_to_warehouse)
        rub_delivery_to_warehouse_formatted = f"{rub_delivery_to_warehouse_value:,.0f}".replace(',', ' ')
        
        cart_text += (
            f"üöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ –Ω–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏: ‚Ç¨{delivery_cost_to_warehouse:.2f} –∏–ª–∏ {rub_delivery_to_warehouse_formatted}‚ÇΩ\n\n"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_type = product.get('delivery_type', '–ú–∞–ª–µ–Ω—å–∫–∏–π –ø–∞–∫–µ—Ç')
        weight = product.get('weight', 1.0)
        delivery_cost_from_germany = product.get('delivery_cost_from_germany', 12.94)
        rub_delivery_from_germany = f"{currency_service.convert_price(delivery_cost_from_germany):,.0f}".replace(',', ' ')
        cart_text += (
            f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏ –¥–æ –†–§:\n\n"
            f"–¢–∏–ø: {delivery_type}\n"
            f"–í–µ—Å: {weight} –∫–≥\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ‚Ç¨{delivery_cost_from_germany:.2f} –∏–ª–∏ {rub_delivery_from_germany}‚ÇΩ\n\n"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
        if product.get('service_commission') and product.get('total'):
            service_commission = product.get('service_commission')
            total = product.get('total')
        else:
            subtotal = price_without_vat + delivery_cost_to_warehouse + delivery_cost_from_germany
            service_commission = round(subtotal * 0.15, 2)
            total = round(subtotal + service_commission, 2)
        
        rub_service_commission = f"{currency_service.convert_price(service_commission):,.0f}".replace(',', ' ')
        cart_text += (
            f"üíº –ö–æ–º–∏—Å—Å–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (15%): ‚Ç¨{service_commission:.2f} –∏–ª–∏ {rub_service_commission}‚ÇΩ\n\n"
        )
        if product.get('link'):
            cart_text += f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {product['link']}\n\n"
        
        rub_total = currency_service.convert_price(total)
        cart_text += (
            f"üí∂ –ò–¢–û–ì–û: ‚Ç¨{total} –∏–ª–∏ {f'{rub_total:,.0f}'.replace(',', ' ')}‚ÇΩ\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–∏–º —Å—É–º–º–∞–º
        total_euro += total
        total_rub += rub_total
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
        if i < len(cart) - 1:
            cart_text += "‚îÄ" * 30 + "\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ
    if len(cart) > 1:
        cart_text += "=" * 40 + "\n"
        cart_text += f"**–û–ë–©–ê–Ø –°–£–ú–ú–ê –ó–ê–ö–ê–ó–ê:**\n"
        cart_text += f"üí∂ ‚Ç¨{total_euro:.2f} –∏–ª–∏ {f'{total_rub:,.0f}'.replace(',', ' ')}‚ÇΩ\n\n"
    
    next_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[KeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],[KeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")]])
    await callback.message.edit_text(cart_text, reply_markup=next_keyboard, parse_mode=None)

@dp.callback_query(lambda c: c.data.startswith("delivery_"), StateFilter(PriceCalculationStates.waiting_for_delivery_type))
async def handle_delivery_type_selection_for_calculation(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã"""
    await log_user_action(callback.from_user.id, callback.from_user.username, f"–ö–Ω–æ–ø–∫–∞: –í—ã–±–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ {callback.data}")
    await callback.answer()
    
    from price_calculator import get_delivery_type_name
    
    delivery_type = callback.data.replace("delivery_", "")
    
    if delivery_type in ["ems"]:
        delivery_type_name = get_delivery_type_name(delivery_type)
        
        await state.set_state(PriceCalculationStates.waiting_for_weight)
        
        await callback.message.edit_text(
            f"‚úÖ **–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –≤—ã–±—Ä–∞–Ω:** {delivery_type_name}\n\n"
            "‚öñÔ∏è **–®–∞–≥ 4: –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å —Ç–æ–≤–∞—Ä–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–µ—Å —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=get_weight_keyboard(delivery_type),
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞!** –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_delivery_type_keyboard_for_calculation()
        )



@dp.callback_query(lambda c: c.data == "back_to_delivery_type", StateFilter(PriceCalculationStates.waiting_for_weight))
async def back_to_delivery_type_for_calculation(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã"""
    await log_user_action(callback.from_user.id, callback.from_user.username, "–ö–Ω–æ–ø–∫–∞: –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–æ—Å—Ç–∞–≤–∫–∏")
    await callback.answer()
    
    await state.set_state(PriceCalculationStates.waiting_for_delivery_type)
    
    await callback.message.edit_text(
        "üì¶ **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –†–æ—Å—Å–∏–∏:",
        reply_markup=get_delivery_type_keyboard_for_calculation()
    )

@dp.callback_query(lambda c: c.data == "delivery_type_callback")
async def delivery_type_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞"""
    await callback.answer()
    
    from price_calculator import get_delivery_type_name
    
    delivery_type = callback.data.replace("delivery_type_", "")
    
    if delivery_type in ["ems"]:
        delivery_type_name = get_delivery_type_name(delivery_type)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
        await state.update_data(selected_delivery_type=delivery_type)
        
        await callback.message.edit_text(
            f"‚úÖ **–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –≤—ã–±—Ä–∞–Ω:** {delivery_type_name}\n\n"
            "‚öñÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å —Ç–æ–≤–∞—Ä–∞:**",
            reply_markup=get_weight_keyboard_for_order(delivery_type),
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞!** –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_delivery_type_keyboard()
        )

@dp.callback_query(lambda c: c.data == "start_order")
async def start_order_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'"""
    await callback.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ø–æ—Å–æ–±–∞—Ö –æ–ø–ª–∞—Ç—ã
    payment_message = """
üí≥ –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–∫, –º–µ–Ω—è –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç", callback_data="payment_ok")],
        [InlineKeyboardButton(
            text="‚ùì –ü–æ–º–æ–≥–∏—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ",
            url="https://telegra.ph/Gajd-Kak-kupit-kriptovalyutu-na-Bybit-dlya-oplaty-uslug-ot-Pay4Way-06-27"
        )]
    ])
    
    await callback.message.answer(payment_message, reply_markup=payment_keyboard)

@dp.message(OrderStates.waiting_for_name)
async def order_name_handler(message: types.Message, state: FSMContext):
    await process_name(message, state)

@dp.message(OrderStates.waiting_for_phone)
async def order_phone_handler(message: types.Message, state: FSMContext):
    await process_phone_number(message, state)

@dp.message(OrderStates.waiting_for_email)
async def order_email_handler(message: types.Message, state: FSMContext):
    await process_email(message, state)

@dp.message(OrderStates.waiting_for_address)
async def order_address_handler(message: types.Message, state: FSMContext):
    await process_address(message, state)


# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.callback_query(lambda c: c.data == "confirm_order", StateFilter(OrderStates.waiting_for_confirmation))
async def confirm_order_handler(callback: types.CallbackQuery, state: FSMContext):
    await confirm_order_callback(callback, state)

@dp.callback_query(lambda c: c.data == "restart_order")
async def restart_order_handler(callback: types.CallbackQuery, state: FSMContext):
    await restart_order(callback, state)

@dp.callback_query(lambda c: c.data == "cancel_order")
async def cancel_order_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_data = await state.get_data()
    cart = current_data.get('cart', [])
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await state.set_data({'cart': cart})
    from keyboards import get_main_reply_keyboard
    await callback.message.answer(
        "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.\n\nüè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_reply_keyboard()
    )


@dp.message(lambda message: message.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart_reply_handler(message: types.Message, state: FSMContext):
    await log_user_action(message.from_user.id, message.from_user.username, "–ö–Ω–æ–ø–∫–∞: –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É (reply)")
    await state.update_data(cart=[])
    text = "üóëÔ∏è **–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!**"
    await message.answer(text, reply_markup=get_cart_reply_keyboard(), parse_mode="Markdown")
    await message.answer("üóëÔ∏è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Inline-–∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await log_user_action(callback.from_user.id, callback.from_user.username, "–ö–Ω–æ–ø–∫–∞: –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_data = await state.get_data()
    cart = current_data.get('cart', [])
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await state.set_data({'cart': cart})

    await callback.message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é !", reply_markup=get_main_reply_keyboard())
    await callback.message.answer("üè†")
    await callback.answer()





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–º–æ—â–∏
@dp.callback_query(lambda c: c.data == "help")
async def help_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    help_text = """
‚ÑπÔ∏è **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

üîç **–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /search
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

üõí **–ö–æ—Ä–∑–∏–Ω–∞:**
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –∫–Ω–æ–ø–∫–æ–π "–í –∫–æ—Ä–∑–∏–Ω—É"
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∫–æ—Ä–∑–∏–Ω—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
‚Ä¢ –û—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–∫–∞–∑—ã

üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ö–æ–Ω—Ç–∞–∫—Ç—ã" –¥–ª—è —Å–≤—è–∑–∏
‚Ä¢ –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
"""
    await callback.message.answer(help_text, parse_mode="Markdown")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "how_to_use")
async def how_to_use_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"""
    text = """
üìñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**

1Ô∏è‚É£ **–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤:**
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"
   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
   ‚Ä¢ –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞

2Ô∏è‚É£ **–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–í–ø–µ—Ä–µ–¥"
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç
   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É

3Ô∏è‚É£ **–ö–æ—Ä–∑–∏–Ω–∞:**
   ‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
   ‚Ä¢ –û—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–∫–∞–∑—ã
"""
    
    await callback.message.answer(text, parse_mode="Markdown")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "payment")
async def payment_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å"""
    text = """
üí≥ **–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã**

–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:

‚Äî ‚Çø **–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:** –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ —Å –ø–æ–º–æ—â—å—é –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –≠—Ç–æ –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–±.

‚Äî üí≥ **–ö–∞—Ä—Ç—ã –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –±–∞–Ω–∫–æ–≤:** –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫ –æ–ø–ª–∞—Ç–µ –∫–∞—Ä—Ç—ã Visa, MasterCard –∏ –¥—Ä—É–≥–∏–µ, –≤—ã–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞—Ä—É–±–µ–∂–Ω—ã–º–∏ –±–∞–Ω–∫–∞–º–∏.

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –ø–æ–º–æ—â—å"
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø–æ–º–æ—â—å", callback_data="help")]
    ])
    
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "support")
async def support_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    text = """
üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:

üí¨ **–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:**
@your_support_username

üìß **Email:**
support@yourcompany.com

üåê **–°–∞–π—Ç:**
https://yourcompany.com/support

‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:**
–ü–Ω-–ü—Ç: 9:00-18:00 (–ú–°–ö)

–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!
"""
    
    await callback.message.answer(text, parse_mode="Markdown")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
@dp.callback_query(lambda c: c.data == "contacts")
async def contacts_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    text = """
üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã**

–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º:

üìß **Email:**
info@yourcompany.com

üì± **Telegram:**
@your_company_bot

üåê **–°–∞–π—Ç:**
https://yourcompany.com

üí¨ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
@your_support_username

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:
"""
    
    await callback.message.answer(text, parse_mode="Markdown")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "about")
async def about_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å"""
    text = """
‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å**

üè¢ **–û –∫–æ–º–ø–∞–Ω–∏–∏:**
–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–∏—Å–∫–µ –∏ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ï–≤—Ä–æ–ø—ã. –ù–∞—à–∞ –º–∏—Å—Å–∏—è - —Å–¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –≤ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –≤—Å–µ—Ö.

üë• **–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞:**
‚Ä¢ –û–ø—ã—Ç–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
‚Ä¢ –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã –≤ –ï–≤—Ä–æ–ø–µ

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ë–æ–ª–µ–µ 1000 —É—Å–ø–µ—à–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫
‚Ä¢ –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ —Å 50+ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: 7-14 –¥–Ω–µ–π

üéØ **–ù–∞—à–∏ —Ü–µ–ª–∏:**
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–º —Ç–æ–≤–∞—Ä–∞–º
‚Ä¢ –û–±–µ—Å–ø–µ—á–∏—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ü–µ–Ω –∏ —É—Å–ª–æ–≤–∏–π
‚Ä¢ –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω—ã–º

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
"""
    
    await callback.message.answer(text, parse_mode="Markdown")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "contact_email")
async def contact_email_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ email –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    text = """
üìß **Email –∫–æ–Ω—Ç–∞–∫—Ç—ã:**

üìß **–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:**
info@yourcompany.com

üõí **–ó–∞–∫–∞–∑—ã:**
orders@yourcompany.com

üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
support@yourcompany.com

üíº **–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ:**
partnership@yourcompany.com

‚è∞ **–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** 1-2 —á–∞—Å–∞
"""
    
    await callback.message.answer(text, parse_mode="Markdown")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "contact_telegram")
async def contact_telegram_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ telegram –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    text = """
üì± **Telegram –∫–æ–Ω—Ç–∞–∫—Ç—ã:**

ü§ñ **–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç:**
@your_company_bot

üë®‚Äçüíº **–ú–µ–Ω–µ–¥–∂–µ—Ä:**
@your_manager_username

üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
@your_support_username

üí¨ **–ß–∞—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:**
@your_community_chat

‚è∞ **–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** 5-15 –º–∏–Ω—É—Ç
"""
    
    await callback.message.answer(text, parse_mode="Markdown")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "contact_website")
async def contact_website_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∞–π—Ç–∞"""
    text = """
üåê **–ù–∞—à —Å–∞–π—Ç:**

üè† **–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:**
https://yourcompany.com

üõí **–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:**
https://yourcompany.com/catalog

üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã:**
https://yourcompany.com/contacts

üìñ **–û –Ω–∞—Å:**
https://yourcompany.com/about

üíº **–ü–∞—Ä—Ç–Ω–µ—Ä–∞–º:**
https://yourcompany.com/partners

üì± **–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è:**
https://m.yourcompany.com
"""
    
    await callback.message.answer(text, parse_mode="Markdown")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "contact_support")
async def contact_support_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    text = """
üí¨ **–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:**

üì± **Telegram:**
@your_support_username

üìß **Email:**
support@yourcompany.com

üåê **–§–æ—Ä–º–∞ –Ω–∞ —Å–∞–π—Ç–µ:**
https://yourcompany.com/support

üìû **–¢–µ–ª–µ—Ñ–æ–Ω:**
+7 (999) 123-45-67

‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:**
–ü–Ω-–ü—Ç: 9:00-18:00 (–ú–°–ö)
–°–±-–í—Å: 10:00-16:00 (–ú–°–ö)

**–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** 15 –º–∏–Ω—É—Ç
"""
    
    await callback.message.answer(text, parse_mode="Markdown")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "clear_cart")
async def clear_cart_callback(callback: types.CallbackQuery, state: FSMContext):
    await log_user_action(callback.from_user.id, callback.from_user.username, "–ö–Ω–æ–ø–∫–∞: –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
    await state.update_data(cart=[])
    text = "üóëÔ∏è **–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!**"
    await callback.message.answer(text, parse_mode="Markdown")
    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")

@dp.callback_query(lambda c: c.data.startswith("remove_item_"))
async def remove_item_callback(callback: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await log_user_action(callback.from_user.id, callback.from_user.username, f"–ö–Ω–æ–ø–∫–∞: –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä {callback.data}")
    await callback.answer()
    try:
        item_index = int(callback.data.split("_")[2])
        data = await state.get_data()
        cart = data.get('cart', [])
        if 0 <= item_index < len(cart):
            cart.pop(item_index)
            await state.update_data(cart=cart)
            # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not cart:
                await callback.message.edit_text(
                    "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏!"
                )
            else:
                # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–ª–æ–≥–∏–∫–∞ –∏–∑ cart_callback)
                cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
                delivery_cost_to_warehouse = 5.00
                total_euro = 0
                total_rub = 0
                for i, product in enumerate(cart):
                    cart_text += f"–¢–æ–≤–∞—Ä #{i+1}\n"
                    price_without_vat = product.get('original_price_without_vat', 0)
                    if price_without_vat == 0:
                        price = product.get('price', 0)
                        if isinstance(price, str):
                            price = price.replace('‚Ç¨', '').replace('$', '').replace('‚ÇΩ', '').replace(',', '.').strip()
                        try:
                            price_with_vat = float(price)
                            price_without_vat = round(price_with_vat * 0.81, 2)
                        except Exception:
                            price_without_vat = 0.0
                    rub_price_without_vat = currency_service.convert_price(price_without_vat)
                    cart_text += (
                        f"ü™ô –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤: ‚Ç¨{price_without_vat} –∏–ª–∏ {f'{rub_price_without_vat:,.0f}'.replace(',', ' ')}‚ÇΩ (–º—ã —É–∂–µ –≤—ã—á–ª–∏ –ù–î–°)\n\n"
                    )
                    cart_text += (
                        f"üöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ –Ω–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏: ‚Ç¨{delivery_cost_to_warehouse}\n\n"
                    )
                    delivery_type = product.get('delivery_type', '–ú–∞–ª–µ–Ω—å–∫–∏–π –ø–∞–∫–µ—Ç')
                    weight = product.get('weight', 1.0)
                    delivery_cost_from_germany = product.get('delivery_cost_from_germany', 12.94)
                    cart_text += (
                        f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏ –¥–æ –†–§:\n\n"
                        f"–¢–∏–ø: {delivery_type}\n"
                        f"–í–µ—Å: {weight} –∫–≥\n"
                        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ‚Ç¨{delivery_cost_from_germany:.2f}\n\n"
                    )
                    if product.get('service_commission') and product.get('total'):
                        service_commission = product.get('service_commission')
                        total = product.get('total')
                    else:
                        subtotal = price_without_vat + delivery_cost_to_warehouse + delivery_cost_from_germany
                        service_commission = round(subtotal * 0.15, 2)
                        total = round(subtotal + service_commission, 2)
                    cart_text += (
                        f"üíº –ö–æ–º–∏—Å—Å–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (15%): ‚Ç¨{service_commission}\n\n"
                    )
                    if product.get('link'):
                        cart_text += f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {product['link']}\n\n"
                    rub_total = currency_service.convert_price(total)
                    cart_text += (
                        f"üí∂ –ò–¢–û–ì–û: ‚Ç¨{total} –∏–ª–∏ {f'{rub_total:,.0f}'.replace(',', ' ')}‚ÇΩ\n\n"
                    )
                    total_euro += total
                    total_rub += rub_total
                    if i < len(cart) - 1:
                        cart_text += "‚îÄ" * 30 + "\n\n"
                if len(cart) > 1:
                    cart_text += "=" * 40 + "\n"
                    cart_text += f"**–û–ë–©–ê–Ø –°–£–ú–ú–ê –ó–ê–ö–ê–ó–ê:**\n"
                    cart_text += f"üí∂ ‚Ç¨{total_euro:.2f} –∏–ª–∏ {f'{total_rub:,.0f}'.replace(',', ' ')}‚ÇΩ\n\n"
                keyboard_buttons = []
                for i in range(len(cart)):
                    keyboard_buttons.append([InlineKeyboardButton(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä #{i+1}", callback_data=f"remove_item_{i}")])
                keyboard_buttons.append([
                    InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"), 
                    InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_from_cart")
                ])
                next_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
                await callback.message.edit_text(cart_text, reply_markup=next_keyboard, parse_mode=None)
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except (ValueError, IndexError) as e:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞
@dp.message(SearchStates.waiting_for_query)
async def process_search_query(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–∏—Å—Ç–∞–Ω–∏—è)"""
    await log_user_action(message.from_user.id, message.from_user.username, f"–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞: {message.text[:50]}")
    query = message.text.strip()
    if len(query) < 2:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    search_msg = await message.answer(f"üîç –ò—â—É —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'...")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ executor
        loop = asyncio.get_event_loop()
        results = await loop.run_in_executor(None, search_idealo_products, query, 10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ 503
        if results is None:
            await search_msg.edit_text(
                "‚ö†Ô∏è **–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
                "üîß –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.\n"
                "üìû –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏: @pay4way_admin",
                parse_mode="Markdown"
            )
            return
        
        if not results:
            await search_msg.edit_text(f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        user_results[user_id] = {
            'results': results,
            'current_index': 0,
            'query': query
        }
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await show_product_card(search_msg, user_id, 0)
        await state.set_state(SearchStates.showing_results)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        await search_msg.edit_text("‚ùå –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏–∑ –∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
                                   "üîß –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.\n"
                                   "üìû –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏: @pay4way_admin")

async def show_product_card(message: types.Message, user_id: int, index: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç user_results)"""
    if user_id not in user_results:
        return
    results = user_results[user_id]['results']
    if not results or index < 0 or index >= len(results):
        return
    product = results[index]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ —Ü–µ–Ω–æ–π –≤ —Ä—É–±–ª—è—Ö
    price = product['price']
    price_eur = 0.0
    offers_count = product.get('offers_count', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
    if isinstance(price, str):
        price_clean = price.replace('‚Ç¨', '').replace('$', '').replace('‚ÇΩ', '').replace(',', '.').strip()
        try:
            price_eur = float(price_clean)
        except:
            price_eur = 0.0
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ —Ä—É–±–ª–∏
    if price_eur > 0:
        rub_price = currency_service.convert_price(price_eur)
        rub_price_formatted = f"{rub_price:,.0f}".replace(',', ' ') if rub_price else "‚Äî"
        formatted_price = f"‚Ç¨{price_eur:.2f} –∏–ª–∏ {rub_price_formatted}‚ÇΩ"
    else:
        formatted_price = price
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    if isinstance(offers_count, str) and offers_count.isdigit():
        offers_num = int(offers_count)
        if offers_num > 1:
            price_display = f"–¶–µ–Ω–∞ –æ—Ç {formatted_price}"
        else:
            price_display = formatted_price
    else:
        price_display = formatted_price
    
    card_text = f"""
üõçÔ∏è **{product['title']}**

üí∞ –¶–µ–Ω–∞ –æ—Ç: {price_display}\n
üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {offers_count} —à—Ç.

*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*
1Ô∏è‚É£ –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä –∏ —Ü–≤–µ—Ç –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´üõçÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä¬ª\n
2Ô∏è‚É£ –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –∏ –∑–∞–ø–æ–º–Ω–∏—Ç–µ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å\n
3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É¬ª. –î–∞–ª–µ–µ —Å–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º –±–æ—Ç–∞.\n
"""
    
    keyboard = get_product_navigation_keyboard(
        current_index=index,
        total_results=len(results),
        product_index=index,
        product_link=product.get('link', '')
    )
    
    if product.get('image'):
        try:
            await message.answer_photo(
                photo=product['image'],
                caption=card_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await message.delete()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            await message.edit_text(card_text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.edit_text(card_text, reply_markup=keyboard, parse_mode="Markdown")

@dp.callback_query(lambda c: c.data.startswith("nav_"))
async def navigation_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º (–≤–ø–µ—Ä—ë–¥/–Ω–∞–∑–∞–¥)"""
    await log_user_action(callback.from_user.id, callback.from_user.username, f"–ö–Ω–æ–ø–∫–∞: –ù–∞–≤–∏–≥–∞—Ü–∏—è {callback.data}")
    user_id = callback.from_user.id
    index = int(callback.data.split("_")[1])
    if user_id in user_results:
        user_results[user_id]['current_index'] = index
        await show_product_card(callback.message, user_id, index)
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("add_to_cart_"))
async def add_to_cart_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    await log_user_action(callback.from_user.id, callback.from_user.username, "–ö–Ω–æ–ø–∫–∞: –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É (–≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)")
    user_id = callback.from_user.id
    index = int(callback.data.split("_")[3])
    if user_id in user_results:
        product = user_results[user_id]['results'][index]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(selected_product=product, selected_product_index=index)
        await state.set_state(CartStates.waiting_for_quantity_search)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        from keyboards import get_quantity_keyboard
        await callback.message.edit_text(
            f"üõí **–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:**\n\n"
            f"üì¶ {product.get('title', '–¢–æ–≤–∞—Ä')[:100]}\n"
            f"üí∞ –¶–µ–Ω–∞: {product.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            f"–°–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?",
            reply_markup=get_quantity_keyboard("search"),
            parse_mode="Markdown"
        )
        await callback.answer()
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query(lambda c: c.data.startswith("quantity_search_"), StateFilter(CartStates.waiting_for_quantity_search))
async def handle_quantity_search(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø–æ–∏—Å–∫–∞"""
    await log_user_action(callback.from_user.id, callback.from_user.username, f"–ö–Ω–æ–ø–∫–∞: –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ {callback.data}")
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ callback_data
    quantity_str = callback.data.split("_")[2]
    
    if quantity_str == "custom":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await callback.message.edit_text(
            "‚úèÔ∏è **–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:**\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 999:",
            parse_mode="Markdown"
        )
        await state.set_state(CartStates.waiting_for_custom_quantity_search)
        return
    
    try:
        quantity = int(quantity_str)
        if quantity < 1 or quantity > 999:
            await callback.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 999")
            return
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
    data = await state.get_data()
    product = data.get('selected_product')
    
    if not product:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫ —Ç–æ–≤–∞—Ä—É
    product_with_quantity = product.copy()
    product_with_quantity['quantity'] = quantity
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    cart = data.get('cart', [])
    cart.append(product_with_quantity)
    await state.update_data(cart=cart)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
    await state.update_data(selected_product=None, selected_product_index=None)
    await state.clear()
    
    await callback.message.edit_text(
        f"‚úÖ **–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!**\n\n"
        f"üì¶ {product.get('title', '–¢–æ–≤–∞—Ä')[:100]}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
        f"üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {product.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        f"–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart")],
            [InlineKeyboardButton(text="üîç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="start_search")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]),
        parse_mode="Markdown"
    )

@dp.callback_query(lambda c: c.data.startswith("quantity_calculated_"), StateFilter(CartStates.waiting_for_quantity_calculated))
async def handle_quantity_calculated(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    await log_user_action(callback.from_user.id, callback.from_user.username, f"–ö–Ω–æ–ø–∫–∞: –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ {callback.data}")
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ callback_data
    quantity_str = callback.data.split("_")[2]
    
    if quantity_str == "custom":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await callback.message.edit_text(
            "‚úèÔ∏è **–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:**\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 999:",
            parse_mode="Markdown"
        )
        await state.set_state(CartStates.waiting_for_custom_quantity_calculated)
        return
    
    try:
        quantity = int(quantity_str)
        if quantity < 1 or quantity > 999:
            await callback.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 999")
            return
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ add_calculated_to_cart)
    data = await state.get_data()
    original_price = data.get('original_price', 0)
    final_price = data.get('final_price', 0)
    delivery_type = data.get('delivery_type', '')
    weight = data.get('weight', 0)
    product_link = data.get('product_link', '')
    product_features = data.get('product_features', '')
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    from price_calculator import get_delivery_cost, get_delivery_type_name, format_price_display
    delivery_cost_from_germany = get_delivery_cost(delivery_type, weight)
    original_price_without_vat = round(original_price * 0.81, 2)
    delivery_cost_to_warehouse = 5.00
    subtotal = original_price_without_vat + delivery_cost_to_warehouse + delivery_cost_from_germany
    service_commission = round(subtotal * 0.15, 2)
    total = round(subtotal + service_commission, 2)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_type_name = get_delivery_type_name(delivery_type)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    calculated_product = {
        'title': f"–¢–æ–≤–∞—Ä (—Ü–µ–Ω–∞: {format_price_display(original_price)})",
        'price': format_price_display(original_price),
        'source': '–†–∞—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        'link': product_link,
        'original_price': original_price,
        'original_price_without_vat': original_price_without_vat,
        'delivery_type': delivery_type_name,
        'delivery_type_code': delivery_type,
        'weight': weight,
        'delivery_cost_from_germany': delivery_cost_from_germany,
        'delivery_cost_to_warehouse': delivery_cost_to_warehouse,
        'service_commission': service_commission,
        'total': total,
        'calculated_price': data.get('calculated_price', 0),
        'product_features': product_features,
        'quantity': quantity  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    cart_data = await state.get_data()
    cart = cart_data.get('cart', [])
    cart.append(calculated_product)
    await state.update_data(cart=cart)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await state.clear()
    await state.update_data(cart=cart)
    
    await callback.message.edit_text(
        f"‚úÖ **–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!**\n\n"
        f"üì¶ –¢–æ–≤–∞—Ä (—Ü–µ–Ω–∞: ‚Ç¨{original_price})\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
        f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ‚Ç¨{total * quantity:.2f}\n\n"
        f"–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart")],
            [InlineKeyboardButton(text="üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä", callback_data="calculate_price")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@dp.message(CartStates.waiting_for_custom_quantity_search)
async def handle_custom_quantity_search(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø–æ–∏—Å–∫–∞"""
    await log_user_action(message.from_user.id, message.from_user.username, f"–í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞: {message.text}")
    
    try:
        quantity = int(message.text.strip())
        if quantity < 1 or quantity > 999:
            await message.answer(
                "‚ùå **–û—à–∏–±–∫–∞!**\n\n"
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 999.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode="Markdown"
            )
            return
    except ValueError:
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞!**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 999.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="Markdown"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
    data = await state.get_data()
    product = data.get('selected_product')
    
    if not product:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫ —Ç–æ–≤–∞—Ä—É
    product_with_quantity = product.copy()
    product_with_quantity['quantity'] = quantity
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    cart = data.get('cart', [])
    cart.append(product_with_quantity)
    await state.update_data(cart=cart)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
    await state.update_data(selected_product=None, selected_product_index=None)
    await state.clear()
    
    await message.answer(
        f"‚úÖ **–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!**\n\n"
        f"üì¶ {product.get('title', '–¢–æ–≤–∞—Ä')[:100]}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
        f"üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {product.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        f"–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart")],
            [InlineKeyboardButton(text="üîç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="start_search")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]),
        parse_mode="Markdown"
    )

@dp.message(CartStates.waiting_for_custom_quantity_calculated)
async def handle_custom_quantity_calculated(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    await log_user_action(message.from_user.id, message.from_user.username, f"–í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: {message.text}")
    
    try:
        quantity = int(message.text.strip())
        if quantity < 1 or quantity > 999:
            await message.answer(
                "‚ùå **–û—à–∏–±–∫–∞!**\n\n"
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 999.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode="Markdown"
            )
            return
    except ValueError:
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞!**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 999.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="Markdown"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ handle_quantity_calculated)
    data = await state.get_data()
    original_price = data.get('original_price', 0)
    final_price = data.get('final_price', 0)
    delivery_type = data.get('delivery_type', '')
    weight = data.get('weight', 0)
    product_link = data.get('product_link', '')
    product_features = data.get('product_features', '')
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    from price_calculator import get_delivery_cost, get_delivery_type_name, format_price_display
    delivery_cost_from_germany = get_delivery_cost(delivery_type, weight)
    original_price_without_vat = round(original_price * 0.81, 2)
    delivery_cost_to_warehouse = 5.00
    subtotal = original_price_without_vat + delivery_cost_to_warehouse + delivery_cost_from_germany
    service_commission = round(subtotal * 0.15, 2)
    total = round(subtotal + service_commission, 2)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_type_name = get_delivery_type_name(delivery_type)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    calculated_product = {
        'title': f"–¢–æ–≤–∞—Ä (—Ü–µ–Ω–∞: {format_price_display(original_price)})",
        'price': format_price_display(original_price),
        'source': '–†–∞—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        'link': product_link,
        'original_price': original_price,
        'original_price_without_vat': original_price_without_vat,
        'delivery_type': delivery_type_name,
        'delivery_type_code': delivery_type,
        'weight': weight,
        'delivery_cost_from_germany': delivery_cost_from_germany,
        'delivery_cost_to_warehouse': delivery_cost_to_warehouse,
        'service_commission': service_commission,
        'total': total,
        'calculated_price': data.get('calculated_price', 0),
        'product_features': product_features,
        'quantity': quantity  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    cart_data = await state.get_data()
    cart = cart_data.get('cart', [])
    cart.append(calculated_product)
    await state.update_data(cart=cart)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await state.clear()
    await state.update_data(cart=cart)
    
    await message.answer(
        f"‚úÖ **–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!**\n\n"
        f"üì¶ –¢–æ–≤–∞—Ä (—Ü–µ–Ω–∞: ‚Ç¨{original_price})\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
        f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ‚Ç¨{total * quantity:.2f}\n\n"
        f"–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart")],
            [InlineKeyboardButton(text="üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä", callback_data="calculate_price")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@dp.callback_query(lambda c: c.data == "back_to_product")
async def back_to_product_callback(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    await log_user_action(callback.from_user.id, callback.from_user.username, "–ö–Ω–æ–ø–∫–∞: –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É")
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
    data = await state.get_data()
    user_id = callback.from_user.id
    selected_product_index = data.get('selected_product_index')
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await state.clear()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
    if selected_product_index is not None and user_id in user_results:
        await show_product_card(callback.message, user_id, selected_product_index)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.edit_text(
            "üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_search")],
                [InlineKeyboardButton(text="üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", callback_data="calculate_price")],
                [InlineKeyboardButton(text="üõç –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")]
            ])
        )

@dp.callback_query(lambda c: c.data == "cart")
async def cart_callback(callback: types.CallbackQuery, state: FSMContext):
    await log_user_action(callback.from_user.id, callback.from_user.username, "–ö–Ω–æ–ø–∫–∞: –ö–æ—Ä–∑–∏–Ω–∞ (callback)")
    data = await state.get_data()
    cart = data.get('cart', [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logging.info(f"Callback –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã. –†–∞–∑–º–µ—Ä –∫–æ—Ä–∑–∏–Ω—ã: {len(cart)}")
    logging.info(f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")
    for i, item in enumerate(cart):
        logging.info(f"–¢–æ–≤–∞—Ä {i+1}: {item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50]}")
        logging.info(f"  - source: {item.get('source', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        logging.info(f"  - price: {item.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
    
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    delivery_cost_to_warehouse = 5.00
    
    if not cart:
        await callback.message.edit_text(
            "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏!",
        )
    else:
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—É–º–º—ã
        total_euro = 0
        total_rub = 0
        
        for i, product in enumerate(cart):
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            quantity = product.get('quantity', 1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            cart_text += f"–¢–æ–≤–∞—Ä #{i+1} (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.)\n"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            price_without_vat = product.get('original_price_without_vat', 0)
            if price_without_vat == 0:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ —Ü–µ–Ω—ã
                price = product.get('price', 0)
                if isinstance(price, str):
                    price = price.replace('‚Ç¨', '').replace('$', '').replace('‚ÇΩ', '').replace(',', '.').strip()
                try:
                    price_with_vat = float(price)
                    price_without_vat = round(price_with_vat * 0.81, 2)
                except Exception:
                    price_without_vat = 0.0
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            total_price_without_vat = price_without_vat * quantity
            rub_price_without_vat = currency_service.convert_price(total_price_without_vat)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ —Å–∫–ª–∞–¥–∞ –≤ —Ä—É–±–ª—è—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
            rub_delivery_to_warehouse_value = currency_service.convert_price(delivery_cost_to_warehouse)
            rub_delivery_to_warehouse = f"{rub_delivery_to_warehouse_value:,.0f}".replace(',', ' ')
            
            cart_text += (
                f"ü™ô –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤: ‚Ç¨{total_price_without_vat:.2f} –∏–ª–∏ {f'{rub_price_without_vat:,.0f}'.replace(',', ' ')}‚ÇΩ (–º—ã —É–∂–µ –≤—ã—á–ª–∏ –ù–î–°)\n"
                f"   ‚îú –ó–∞ –µ–¥–∏–Ω–∏—Ü—É: ‚Ç¨{price_without_vat:.2f} √ó {quantity} —à—Ç.\n\n"
            )
            cart_text += (
                f"üöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ –Ω–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏: ‚Ç¨{delivery_cost_to_warehouse:.2f} –∏–ª–∏ {rub_delivery_to_warehouse}‚ÇΩ\n\n"
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_type = product.get('delivery_type', '–ú–∞–ª–µ–Ω—å–∫–∏–π –ø–∞–∫–µ—Ç')
            weight = product.get('weight', 1.0)
            delivery_cost_from_germany = product.get('delivery_cost_from_germany', 12.94)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏ –≤ —Ä—É–±–ª—è—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
            rub_delivery_from_germany_value = currency_service.convert_price(delivery_cost_from_germany)
            rub_delivery_from_germany = f"{rub_delivery_from_germany_value:,.0f}".replace(',', ' ')
            cart_text += (
                f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏ –¥–æ –†–§:\n\n"
                f"–¢–∏–ø: {delivery_type}\n"
                f"–í–µ—Å: {weight} –∫–≥\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ‚Ç¨{delivery_cost_from_germany:.2f} –∏–ª–∏ {rub_delivery_from_germany}‚ÇΩ\n\n"
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            if product.get('service_commission') and product.get('total'):
                service_commission_per_unit = product.get('service_commission')
                total_per_unit = product.get('total')
                service_commission = service_commission_per_unit * quantity
                total = total_per_unit * quantity
            else:
                subtotal = total_price_without_vat + delivery_cost_to_warehouse + delivery_cost_from_germany
                service_commission = round(subtotal * 0.15, 2)
                total = round(subtotal + service_commission, 2)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é —Å–µ—Ä–≤–∏—Å–∞ –≤ —Ä—É–±–ª—è—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
            rub_service_commission_value = currency_service.convert_price(service_commission)
            rub_service_commission = f"{rub_service_commission_value:,.0f}".replace(',', ' ')
            cart_text += (
                f"üíº –ö–æ–º–∏—Å—Å–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (15%): ‚Ç¨{service_commission:.2f} –∏–ª–∏ {rub_service_commission}‚ÇΩ\n\n"
            )
            if product.get('link'):
                cart_text += f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {product['link']}\n\n"
            
            rub_total = currency_service.convert_price(total)
            cart_text += (
                f"üí∂ –ò–¢–û–ì–û –∑–∞ {quantity} —à—Ç.: ‚Ç¨{total:.2f} –∏–ª–∏ {f'{rub_total:,.0f}'.replace(',', ' ')}‚ÇΩ\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–∏–º —Å—É–º–º–∞–º
            total_euro += total
            total_rub += rub_total
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
            if i < len(cart) - 1:
                cart_text += "‚îÄ" * 30 + "\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ
        if len(cart) > 1:
            cart_text += "=" * 40 + "\n"
            cart_text += f"**–û–ë–©–ê–Ø –°–£–ú–ú–ê –ó–ê–ö–ê–ó–ê:**\n"
            cart_text += f"üí∂ ‚Ç¨{total_euro:.2f} –∏–ª–∏ {f'{total_rub:,.0f}'.replace(',', ' ')}‚ÇΩ\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        keyboard_buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        for i in range(len(cart)):
            keyboard_buttons.append([InlineKeyboardButton(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä #{i+1}", callback_data=f"remove_item_{i}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard_buttons.append([
            InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"), 
            InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_from_cart")
        ])
        
        next_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await callback.message.edit_text(cart_text, reply_markup=next_keyboard, parse_mode=None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞

@dp.callback_query(lambda c: c.data == "start_price_calculation")
async def start_price_calculation(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    current_data = await state.get_data()
    cart = current_data.get('cart', [])
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await state.set_data({'cart': cart})
    await callback.answer()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    await state.update_data(calculation_data={})
    await state.set_state(PriceCalculationStates.waiting_for_original_price)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.answer(
        "üí∞–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:",
        parse_mode="Markdown"
    )

@dp.message(PriceCalculationStates.waiting_for_original_price)
async def handle_original_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    await log_user_action(message.from_user.id, message.from_user.username, f"–í–≤–æ–¥ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 2): {message.text}")
    from price_calculator import extract_price_value, format_price_display
    
    price_text = message.text.strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
    original_price = extract_price_value(price_text)
    
  
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É
    await state.update_data(final_price=original_price)
    
    await state.set_state(PriceCalculationStates.waiting_for_delivery_type)
    
    await message.answer(
        f"‚úÖ **–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∞:** {format_price_display(original_price)}\n\n"
        "üì¶ –®–∞–≥ 3 **–í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏ –¥–æ –†–æ—Å—Å–∏–∏**\n\n"
        "üöö –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏ –¥–æ –†–æ—Å—Å–∏–∏:",
        reply_markup=get_delivery_type_keyboard_for_calculation(),
        parse_mode="Markdown"
    )

@dp.callback_query(lambda c: c.data == "cancel_price_calculation")
async def cancel_price_calculation(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã"""
    await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_data = await state.get_data()
    cart = current_data.get('cart', [])
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await state.clear()
    await state.update_data(cart=cart)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.answer(
        "‚ùå –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_back_keyboard()
    )

@dp.callback_query(lambda c: c.data == "select_quantity_calculated")
async def select_quantity_calculated(callback: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    await log_user_action(callback.from_user.id, callback.from_user.username, "–ö–Ω–æ–ø–∫–∞: –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    data = await state.get_data()
    original_price = data.get('original_price', 0)
    product_link = data.get('product_link', '')
    product_features = data.get('product_features', '')
    
    await state.set_state(CartStates.waiting_for_quantity_calculated)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    from keyboards import get_quantity_keyboard
    await callback.message.edit_text(
        f"üõí **–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:**\n\n"
        f"üì¶ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä\n"
        f"üí∞ –¶–µ–Ω–∞: ‚Ç¨{original_price}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {product_link[:50]}{'...' if len(product_link) > 50 else ''}\n"
        f"üìù –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {product_features[:50]}{'...' if len(product_features) > 50 else ''}\n\n"
        f"–°–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?",
        reply_markup=get_quantity_keyboard("calculated"),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "add_calculated_to_cart")
async def add_calculated_to_cart(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    await log_user_action(callback.from_user.id, callback.from_user.username, "–ö–Ω–æ–ø–∫–∞: –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞
    data = await state.get_data()
    original_price = data.get('original_price', 0)
    final_price = data.get('final_price', 0)
    delivery_type = data.get('delivery_type', '')
    weight = data.get('weight', 0)
    product_link = data.get('product_link', '')
    product_features = data.get('product_features', '')  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É:")
    logging.info(f"original_price: {original_price}")
    logging.info(f"final_price: {final_price}")
    logging.info(f"delivery_type: {delivery_type}")
    logging.info(f"weight: {weight}")
    logging.info(f"product_link: {product_link}")
    logging.info(f"product_features: {product_features}")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    from price_calculator import get_delivery_cost, get_delivery_type_name, format_price_display
    delivery_cost_from_germany = get_delivery_cost(delivery_type, weight)
    original_price_without_vat = round(original_price * 0.81, 2)
    delivery_cost_to_warehouse = 5.00
    subtotal = original_price_without_vat + delivery_cost_to_warehouse + delivery_cost_from_germany
    service_commission = round(subtotal * 0.15, 2)
    total = round(subtotal + service_commission, 2)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_type_name = get_delivery_type_name(delivery_type)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã —Å –í–°–ï–ú–ò –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    calculated_product = {
        'title': f"–¢–æ–≤–∞—Ä (—Ü–µ–Ω–∞: {format_price_display(original_price)})",
        'price': format_price_display(original_price),
        'source': '–†–∞—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        'link': product_link,
        'original_price': original_price,
        'original_price_without_vat': original_price_without_vat,
        'delivery_type': delivery_type_name,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        'delivery_type_code': delivery_type,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        'weight': weight,
        'delivery_cost_from_germany': delivery_cost_from_germany,
        'delivery_cost_to_warehouse': delivery_cost_to_warehouse,
        'service_commission': service_commission,
        'total': total,
        'calculated_price': data.get('calculated_price', 0),
        'product_features': product_features  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    cart_data = await state.get_data()
    cart = cart_data.get('cart', [])
    logging.info(f"–†–∞–∑–º–µ—Ä –∫–æ—Ä–∑–∏–Ω—ã –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {len(cart)}")
    cart.append(calculated_product)
    await state.update_data(cart=cart)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    verification_data = await state.get_data()
    verification_cart = verification_data.get('cart', [])
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - —Ä–∞–∑–º–µ—Ä –∫–æ—Ä–∑–∏–Ω—ã: {len(verification_cart)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏–ª—Å—è
    cart_after = await state.get_data()
    cart_final = cart_after.get('cart', [])
    logging.info(f"–†–∞–∑–º–µ—Ä –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {len(cart_final)}")
    logging.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä: {calculated_product.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await state.update_data({
        'cart': cart_final,
        'original_price': None,
        'final_price': None,
        'delivery_type': None,
        'weight': None,
        'product_link': None,
        'product_features': None  # –û—á–∏—â–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    })
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.answer(
        "‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É! \n\n"
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é \"üõç –ö–æ—Ä–∑–∏–Ω–∞\"",
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data == "back_to_delivery_type_order")
async def back_to_delivery_type_order_handler(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
    data = await state.get_data()
    cart = data.get('cart', [])
    
    if not cart:
        await callback.message.edit_text(
            "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø–æ–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏!",
            reply_markup=get_back_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ —Å —Å—Å—ã–ª–∫–∞–º–∏
    cart_text = "üõç **–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:**\n\n"
    
    for i, product in enumerate(cart, 1):
        cart_text += f"{i}. üõçÔ∏è **{product['title']}**\n"
        cart_text += f"   üí∞ –¶–µ–Ω–∞: {product['price']}\n"
        cart_text += f"   üè™ –ú–∞–≥–∞–∑–∏–Ω: {product.get('source', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        if product.get('link'):
            cart_text += f"   üîó –°—Å—ã–ª–∫–∞: {product['link']}\n"
        cart_text += "\n"
    
    cart_text += f"üìä **–ò—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:** {len(cart)} —à—Ç.\n\n"
    cart_text += "üí° –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_keyboard = get_delivery_type_keyboard()
    
    await callback.message.edit_text(cart_text, parse_mode="Markdown", reply_markup=delivery_keyboard)


@dp.callback_query(lambda c: c.data == "payment_ok")
async def payment_ok_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–∫, –º–µ–Ω—è –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç'"""
    await log_user_action(callback.from_user.id, callback.from_user.username, "–ö–Ω–æ–ø–∫–∞: –û–∫, –º–µ–Ω—è –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç")
    await callback.answer()
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    await state.set_state(OrderStates.waiting_for_name)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):")

@dp.callback_query(lambda c: c.data == "back_to_order")
async def back_to_order_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –∫ –∑–∞–∫–∞–∑—É"""
    await callback.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –æ —Å–ø–æ—Å–æ–±–∞—Ö –æ–ø–ª–∞—Ç—ã
    payment_message = """
üí≥ –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–∫, –º–µ–Ω—è –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç", callback_data="payment_ok")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ–≥–∏—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ", url="https://telegra.ph/Gajd-Kak-kupit-kriptovalyutu-na-Bybit-dlya-oplaty-uslug-ot-Pay4Way-06-27")]
    ])
    
    await callback.message.edit_text(payment_message, reply_markup=payment_keyboard)


@dp.callback_query(lambda c: c.data == "back_to_cart")
async def back_to_cart_callback(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cart = data.get('cart', [])
    rub_delivery_to_warehouse = f"{currency_service.convert_price(delivery_cost_to_warehouse):,.0f}".replace(',', ' ')
    if not cart:
        await callback.message.edit_text(
            "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏!"
        )
        await callback.answer()
        return
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    delivery_cost_to_warehouse = 5.00
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—É–º–º—ã
    total_euro = 0
    total_rub = 0
    
    for i, product in enumerate(cart):
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞
        cart_text += f"–¢–æ–≤–∞—Ä #{i+1}\n"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        price_without_vat = product.get('original_price_without_vat', 0)
        if price_without_vat == 0:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ —Ü–µ–Ω—ã
            price = product.get('price', 0)
            if isinstance(price, str):
                price = price.replace('‚Ç¨', '').replace('$', '').replace('‚ÇΩ', '').replace(',', '.').strip()
            try:
                price_with_vat = float(price)
                price_without_vat = round(price_with_vat * 0.81, 2)
            except Exception:
                price_without_vat = 0.0
        
        rub_price_without_vat = currency_service.convert_price(price_without_vat)
        rub_delivery_to_warehouse = f"{currency_service.convert_price(delivery_cost_to_warehouse):,.0f}".replace(',', ' ')
        cart_text += (
            f"ü™ô –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤: ‚Ç¨{price_without_vat} –∏–ª–∏ {f'{rub_price_without_vat:,.0f}'.replace(',', ' ')}‚ÇΩ (–º—ã —É–∂–µ –≤—ã—á–ª–∏ –ù–î–°)\n\n"
        )
        cart_text += (
            f"üöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ –Ω–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏: ‚Ç¨{delivery_cost_to_warehouse:.2f} –∏–ª–∏ {rub_delivery_to_warehouse}‚ÇΩ\n\n"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_type = product.get('delivery_type', '–ú–∞–ª–µ–Ω—å–∫–∏–π –ø–∞–∫–µ—Ç')
        weight = product.get('weight', 1.0)
        delivery_cost_from_germany = product.get('delivery_cost_from_germany', 12.94)
        rub_delivery_from_germany = f"{currency_service.convert_price(delivery_cost_from_germany):,.0f}".replace(',', ' ')
        rub_service_commission = f"{currency_service.convert_price(service_commission):,.0f}".replace(',', ' ')
        cart_text += (
            f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏ –¥–æ –†–§:\n\n"
            f"–¢–∏–ø: {delivery_type}\n"
            f"–í–µ—Å: {weight} –∫–≥\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ‚Ç¨{delivery_cost_from_germany:.2f} –∏–ª–∏ {rub_delivery_from_germany}‚ÇΩ\n\n"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
        if product.get('service_commission') and product.get('total'):
            service_commission = product.get('service_commission')
            total = product.get('total')
        else:
            subtotal = price_without_vat + delivery_cost_to_warehouse + delivery_cost_from_germany
            service_commission = round(subtotal * 0.15, 2)
            total = round(subtotal + service_commission, 2)
        
        cart_text += (
            f"üíº –ö–æ–º–∏—Å—Å–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (15%): ‚Ç¨{service_commission:.2f} –∏–ª–∏ {rub_service_commission}‚ÇΩ\n\n"
        )
        if product.get('link'):
            cart_text += f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {product['link']}\n\n"
        
        rub_total = currency_service.convert_price(total)
        cart_text += (
            f"üí∂ –ò–¢–û–ì–û: ‚Ç¨{total:.2f} –∏–ª–∏ {f'{rub_total:,.0f}'.replace(',', ' ')}‚ÇΩ\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–∏–º —Å—É–º–º–∞–º
        total_euro += total
        total_rub += rub_total
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
        if i < len(cart) - 1:
            cart_text += "‚îÄ" * 30 + "\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ
    if len(cart) > 1:
        cart_text += "=" * 40 + "\n"
        cart_text += f"**–û–ë–©–ê–Ø –°–£–ú–ú–ê –ó–ê–ö–ê–ó–ê:**\n"
        cart_text += f"üí∂ ‚Ç¨{total_euro:.2f} –∏–ª–∏ {f'{total_rub:,.0f}'.replace(',', ' ')}‚ÇΩ\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    keyboard_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    for i in range(len(cart)):
        keyboard_buttons.append([InlineKeyboardButton(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä #{i+1}", callback_data=f"remove_item_{i}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard_buttons.append([
        InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"), 
        InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_from_cart")
    ])
    
    next_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await callback.message.edit_text(cart_text, reply_markup=next_keyboard, parse_mode=None)
    await callback.answer()

@dp.message(PriceCalculationStates.waiting_for_product_link)
async def handle_product_link(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä"""
    await log_user_action(message.from_user.id, message.from_user.username, f"–í–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 2): {message.text[:100]}")
    from price_calculator import format_price_display
    
    product_link = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫—É
    if not (product_link.startswith('http://') or product_link.startswith('https://')):
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.\n"
            "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ https://www.amazon.de/product/...\n"
            "‚Ä¢ https://www.ebay.de/itm/...\n"
            "‚Ä¢ https://www.idealo.de/...",
            reply_markup=get_cancel_price_calculation_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞
    data = await state.get_data()
    original_price = data.get('original_price', 0)
    final_price = data.get('final_price', 0)
    delivery_type = data.get('delivery_type', '')
    weight = data.get('weight', 0)
    calculated_price = data.get('calculated_price', 0)
    calculated_price_without_vat = data.get('calculated_price_without_vat', 0)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä
    await state.update_data(product_link=product_link)
    
    await state.set_state(PriceCalculationStates.showing_result)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º
    from price_calculator import get_delivery_cost, get_delivery_type_name
    
    delivery_cost = get_delivery_cost(delivery_type, weight)
    delivery_type_name = get_delivery_type_name(delivery_type)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
    delivery_from_google = final_price - original_price
    price_without_vat_step = original_price - (original_price * 0.19)
    step3 = delivery_from_google + price_without_vat_step
    step4 = step3 + delivery_cost
    step5 = step4 * 0.15
    
    calculation_text = (
            f"üí∞ **–ò–¢–û–ì–û:**\n\n"
            f"ü™ô **–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:** {format_price_with_rub(original_price)} (–∞ –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å {format_price_with_rub(original_price * 1.19)}, –µ—Å–ª–∏ –±—ã –º—ã –Ω–µ —É–±—Ä–∞–ª–∏ –ù–î–°)\n\n"
            f"üöö **–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –Ω–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏:** {format_price_with_rub(delivery_from_google)}\n\n"
            f"üì¶ **–î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏ –¥–æ –†–§:**\n"
            f"–¢–∏–ø: {delivery_type_name}\n"
            f"–í–µ—Å: {weight} –∫–≥\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {format_price_with_rub(step4)}\n\n"
            f"üíº **–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ (15%):** {format_price_with_rub(step5)}\n\n"
            f"üí∂ **–ò–¢–û–ì–û:** {format_price_with_rub(calculated_price)} (–∞ –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å {format_price_with_rub(calculated_price * 1.19)}). –≠–∫–æ–Ω–æ–º–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {format_price_with_rub(calculated_price * 0.19)}"
        )
    
    await message.answer(
        calculation_text,
        reply_markup=get_add_to_cart_from_calculation_keyboard(),
        parse_mode="Markdown"
    )

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –£–¥–∞–ª—è–µ–º webhook –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
    await bot.delete_webhook(drop_pending_updates=True)
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ)
@dp.message()
async def echo_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await log_user_action(message.from_user.id, message.from_user.username, f"–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text[:50] if message.text else '–ù–µ —Ç–µ–∫—Å—Ç'}")
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –∏–ª–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º !", parse_mode="Markdown")

@dp.callback_query(lambda c: c.data == "order_from_cart")
async def start_order_from_cart(callback: types.CallbackQuery, state: FSMContext):
    await log_user_action(callback.from_user.id, callback.from_user.username, "–ö–Ω–æ–ø–∫–∞: –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ø–æ—Å–æ–±–∞—Ö –æ–ø–ª–∞—Ç—ã
    payment_message = (
        "üí≥ –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞"
    )
    payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–∫, –º–µ–Ω—è –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç", callback_data="payment_ok")],
        [InlineKeyboardButton(
            text="‚ùì –ü–æ–º–æ–≥–∏—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ",
            url="https://telegra.ph/Gajd-Kak-kupit-kriptovalyutu-na-Bybit-dlya-oplaty-uslug-ot-Pay4Way-06-27"
        )]
    ])
    await callback.message.answer(payment_message, reply_markup=payment_keyboard)

@dp.callback_query(lambda c: c.data == "no_link")
async def no_link_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä"""
    await log_user_action(callback.from_user.id, callback.from_user.username, "–ö–Ω–æ–ø–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Å—ã–ª–∫–∞")
    await callback.answer("‚ö†Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")

if __name__ == "__main__":
    asyncio.run(main()) 
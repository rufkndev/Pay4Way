# order_handlers.py

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import get_cart_reply_keyboard, get_main_reply_keyboard
import logging
import os
from datetime import datetime
from dotenv import load_dotenv
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import urllib.parse
from price_calculator import calculate_cart_total, format_price_display
from formatting_utils import format_total_with_savings, format_price_with_rub
from services.currency_service import currency_service

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
class OrderStates(StatesGroup):
    waiting_for_name = State()      # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –§–ò–û
    waiting_for_phone = State()     # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    waiting_for_email = State()     # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ email
    waiting_for_address = State()   # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
    waiting_for_confirmation = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

# –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–±—É–¥—É—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ)

async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û"""
    name = message.text
    await state.update_data(name=name)
    await message.answer("üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79998887766:")
    await state.set_state(OrderStates.waiting_for_phone)

async def process_phone_number(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone_number = message.text
    await state.update_data(phone_number=phone_number)
    await message.answer("üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await state.set_state(OrderStates.waiting_for_email)

async def process_email(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ email"""
    email = message.text
    await state.update_data(email=email)
    await message.answer("üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –†–æ—Å—Å–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: –∏–Ω–¥–µ–∫—Å, –≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞")
    await state.set_state(OrderStates.waiting_for_address)

async def process_address(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞"""
    address = message.text
    await state.update_data(address=address)
    # –ü–æ—Å–ª–µ –∞–¥—Ä–µ—Å–∞ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    order_data = await state.get_data()
    cart_items = order_data.get('cart', [])
    if not cart_items:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ (–æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤)
    first_product = cart_items[0]
    delivery_type_code = first_product.get('delivery_type_code', 'small_package')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
    delivery_type_name = first_product.get('delivery_type', '–ú–∞–ª–µ–Ω—å–∫–∏–π –ø–∞–∫–µ—Ç')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    weight = first_product.get('weight', 1.0)
    from price_calculator import get_delivery_type_name, format_price_display, get_delivery_cost
    from formatting_utils import format_price_with_rub, format_total_with_savings
    delivery_cost_to_warehouse = 5.00  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    delivery_cost_from_germany = get_delivery_cost(delivery_type_code, weight)
    order_summary = f"""
**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:**

üë§ **–§–ò–û:** {order_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {order_data.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìß **Email:** {order_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìç **–ê–¥—Ä–µ—Å:** {order_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üõç **–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ ({len(cart_items)} —à—Ç.):**
"""
    total_products_without_vat = 0
    total_products_with_vat = 0
    for i, product in enumerate(cart_items, 1):
        price_without_vat = product.get('original_price_without_vat', 0)
        price_with_vat = product.get('original_price', 0)
        if price_without_vat == 0 or price_with_vat == 0:
            price = product.get('price', 0)
            if isinstance(price, str):
                price = price.replace('‚Ç¨', '').replace('$', '').replace('‚ÇΩ', '').replace(',', '.').strip()
            try:
                price_with_vat = float(price)
                price_without_vat = round(price_with_vat * 0.81, 2)
            except Exception:
                price_with_vat = 0.0
                price_without_vat = 0.0
        total_products_without_vat += price_without_vat
        total_products_with_vat += price_with_vat
        order_summary += f"{i}. **{product['title']}**\n"
        order_summary += f"   üí∂ –¶–µ–Ω–∞: {format_price_with_rub(price_without_vat)} –±–µ–∑ –ù–î–° \n"
        if product.get('link'):
            order_summary += f"   üîó –°—Å—ã–ª–∫–∞: {product['link']}"
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä
        if i < len(cart_items):
            order_summary += "\n"
    subtotal = total_products_without_vat + delivery_cost_to_warehouse + delivery_cost_from_germany
    service_commission = round(subtotal * 0.15, 2)
    total_cost = round(subtotal + service_commission, 2)
    savings = total_products_with_vat - total_products_without_vat
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç –∑–∞—Ä–∞–Ω–µ–µ
    rub_total_products = currency_service.convert_price(total_products_without_vat)
    rub_delivery_to_warehouse = currency_service.convert_price(delivery_cost_to_warehouse)
    rub_delivery_from_germany = currency_service.convert_price(delivery_cost_from_germany)
    rub_service_commission = currency_service.convert_price(service_commission)
    rub_total_cost = currency_service.convert_price(total_cost)
    rub_savings = currency_service.convert_price(savings)
    
    order_summary += f"""
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
**–ò–¢–û–ì–û:**

ü™ô **–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤:** {total_products_without_vat} ‚Ç¨ –∏–ª–∏ {f'{rub_total_products:,.0f}'.replace(',', ' ')} ‚ÇΩ

üöö **–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ –Ω–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞ –≤ –≥–µ—Ä–º–∞–Ω–∏–∏:** {delivery_cost_to_warehouse} ‚Ç¨ –∏–ª–∏ {f'{rub_delivery_to_warehouse:,.0f}'.replace(',', ' ')} ‚ÇΩ

üì¶ **–î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏ –¥–æ –†–§:**
   –¢–∏–ø: {delivery_type_name}
   –í–µ—Å: {weight} –∫–≥
   –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_cost_from_germany} ‚Ç¨ –∏–ª–∏ {f'{rub_delivery_from_germany:,.0f}'.replace(',', ' ')} ‚ÇΩ

üíº **–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ (15%):** {service_commission} ‚Ç¨ –∏–ª–∏ {f'{rub_service_commission:,.0f}'.replace(',', ' ')} ‚ÇΩ

üí∂ **–ò–¢–û–ì–û:** {total_cost} –∏–ª–∏ {f'{rub_total_cost:,.0f}'.replace(',', ' ')} ‚ÇΩ

*–≠–∫–æ–Ω–æ–º–∏—è —Å–æ—Å—Ç–æ–≤–ª—è–µ—Ç {savings:.2f} ‚Ç¨ –∏–ª–∏ {f'{rub_savings:,.0f}'.replace(',', ' ')} ‚ÇΩ*

–í—Å—ë –≤–µ—Ä–Ω–æ?
"""
    from keyboards import get_order_confirmation_keyboard
    confirmation_keyboard = get_order_confirmation_keyboard()
    await message.answer(order_summary, parse_mode="Markdown", reply_markup=confirmation_keyboard)
    await state.set_state(OrderStates.waiting_for_confirmation)

async def confirm_order_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    await callback.answer()
    
    logging.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order_data = await state.get_data()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: {list(order_data.keys())}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = {
        'user_id': callback.from_user.id,
        'username': callback.from_user.username,
        'first_name': callback.from_user.first_name,
        'last_name': callback.from_user.last_name
    }
    logging.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_info}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    cart_items = order_data.get('cart', [])
    logging.info(f"–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {len(cart_items)}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
    for i, product in enumerate(cart_items):
        logging.info(f"–¢–æ–≤–∞—Ä {i+1}: {product.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        logging.info(f"  - product_features: {product.get('product_features', '–ù–ï–¢')}")
    
    if not cart_items:
        logging.error("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º order_id
    order_id = int(datetime.now().timestamp())
    
    # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã
    product_comments = []
    for product in cart_items:
        if product.get('product_features'):
            product_comments.append(product['product_features'])
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    combined_comment = '; '.join(product_comments) if product_comments else ''
    logging.info(f"–°–æ–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {combined_comment}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    logging.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    success = await process_order_completion(order_data, user_info, cart_items, order_id, combined_comment)
    logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {success}")
    
    if success:
        logging.info("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        final_message = f"""
‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! ‚úÖ

–í–∞—à ID –∑–∞–∫–∞–∑–∞: {order_id}

–ù–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

üßë‚Äçüíª –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–ø–∏—à–µ—Ç –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å—Ä–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:
‚Ä¢ Telegram: @pay4way_admin
‚Ä¢ Email: support@pay4way.com

–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ, –≤–∞—à Pay4Way! üöÄ
"""

        
        await callback.message.answer(final_message)
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        await state.update_data(cart=[])
        await state.clear()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        from keyboards import get_main_reply_keyboard
        await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_reply_keyboard())
        logging.info("–ó–∞–∫–∞–∑ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

async def restart_order(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ'"""
    await callback.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
    
    await callback.message.answer("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ!")
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):")
    
    # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await state.update_data(name=None, phone_number=None, email=None, address=None)
    await state.set_state(OrderStates.waiting_for_name)

async def save_order_to_sheets(order_data: dict, user_info: dict, order_id: int = None, calculation_comment: str = '') -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –≤ Google Sheets
    
    Args:
        order_data: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        user_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        order_id: ID –∑–∞–∫–∞–∑–∞ (timestamp)
        calculation_comment: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞—Å—á—ë—Ç–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
    """
    try:
        from services.google_sheets_service import GoogleSheetsService
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
        sheets_service = GoogleSheetsService()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—É–º–º—ã
        cart_items = order_data.get('cart', [])
        
        if not cart_items:
            logging.error("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Google Sheets")
            return False
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        product_comments = []
        for product in cart_items:
            if product.get('product_features'):
                product_comments.append(product['product_features'])
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        combined_comment = '; '.join(product_comments) if product_comments else calculation_comment
        
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ save_order_to_sheets:")
        logging.info(f"  - product_comments: {product_comments}")
        logging.info(f"  - calculation_comment: {calculation_comment}")
        logging.info(f"  - combined_comment: {combined_comment}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        first_product = cart_items[0]
        delivery_type_code = first_product.get('delivery_type_code', 'small_package')
        weight = first_product.get('weight', 1.0)
        payment_method = order_data.get('payment_method', 'card')
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã –ø–æ –Ω–∞—à–µ–π —Ñ–æ—Ä–º—É–ª–µ
        from price_calculator import calculate_cart_total, get_delivery_type_name, get_delivery_cost
        calculation_result = calculate_cart_total(cart_items, delivery_type_code, weight)
        delivery_type_name = first_product.get('delivery_type', '–ú–∞–ª–µ–Ω—å–∫–∏–π –ø–∞–∫–µ—Ç')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        payment_method_name = "–ö–∞—Ä—Ç–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞" if payment_method == "card" else "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã
        total_products_without_vat = sum(product.get('original_price_without_vat', 0) for product in cart_items)
        total_products_with_vat = sum(product.get('original_price', 0) for product in cart_items)
        delivery_cost_to_warehouse = 5.00
        delivery_cost_from_germany = get_delivery_cost(delivery_type_code, weight)
        subtotal = total_products_without_vat + delivery_cost_to_warehouse + delivery_cost_from_germany
        service_commission = round(subtotal * 0.15, 2)
        total_cost = round(subtotal + service_commission, 2)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–±—â–µ–π —Å—É–º–º–æ–π
        total_amount_str = f"–° –ù–î–°: ‚Ç¨{total_products_with_vat:.2f}, –ë–µ–∑ –ù–î–°: ‚Ç¨{total_products_without_vat:.2f} (–¢–∏–ø: {delivery_type_name}, –í–µ—Å: {weight} –∫–≥)"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google Sheets
        sheets_order_data = {
            'order_id': order_id if order_id else '',
            'full_name': order_data.get('name', ''),
            'phone': order_data.get('phone_number', ''),
            'email': order_data.get('email', ''),
            'address': order_data.get('address', ''),
            'comment': combined_comment,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            'total_amount': total_amount_str,
            'items_count': len(cart_items),
            'cart_items': cart_items,  # –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            'telegram_id': user_info.get('user_id', ''),
            'username': user_info.get('username', ''),
            'delivery_type': delivery_type_name,
            'weight': f"{weight} –∫–≥",
            'payment_method': payment_method_name,
            'delivery_cost': f"‚Ç¨{delivery_cost_from_germany:.2f}",
            'service_commission': f"‚Ç¨{service_commission:.2f}",
            'total_cost': f"‚Ç¨{total_cost:.2f}"
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        success = sheets_service.add_order(sheets_order_data)
        
        if success:
            logging.info(f"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Sheets –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info.get('user_id')}")
        else:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ Google Sheets –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info.get('user_id')}")
        
        return success
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets: {e}")
        return False

async def send_order_to_manager(order_data: dict, user_info: dict, cart_items: list) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    
    Args:
        order_data: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        user_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        cart_items: –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    """
    try:
        # –ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager_id = "7197183698"
        
        if not cart_items:
            logging.error("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É")
            return False
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        product_comments = []
        for product in cart_items:
            if product.get('product_features'):
                product_comments.append(product['product_features'])
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        combined_comment = '; '.join(product_comments) if product_comments else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        first_product = cart_items[0]
        delivery_type_code = first_product.get('delivery_type_code', 'small_package')
        weight = first_product.get('weight', 1.0)
        payment_method = order_data.get('payment_method', 'card')
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
        from price_calculator import get_delivery_type_name, get_delivery_cost, format_price_display
        from formatting_utils import format_price_with_rub
        
        delivery_type_name = first_product.get('delivery_type', '–ú–∞–ª–µ–Ω—å–∫–∏–π –ø–∞–∫–µ—Ç')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        delivery_cost_to_warehouse = 5.00
        delivery_cost_from_germany = get_delivery_cost(delivery_type_code, weight)
        payment_method_name = "–ö–∞—Ä—Ç–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞" if payment_method == "card" else "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã
        total_products_without_vat = sum(product.get('original_price_without_vat', 0) for product in cart_items)
        total_products_with_vat = sum(product.get('original_price', 0) for product in cart_items)
        subtotal = total_products_without_vat + delivery_cost_to_warehouse + delivery_cost_from_germany
        service_commission = round(subtotal * 0.15, 2)
        total_cost = round(subtotal + service_commission, 2)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager_message = f"""
üÜï **–ù–û–í–´–ô –ó–ê–ö–ê–ó!**

üë§ **–ö–ª–∏–µ–Ω—Ç:**
‚Ä¢ –§–ò–û: {order_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {order_data.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ Email: {order_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –ê–¥—Ä–µ—Å: {order_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {combined_comment}

üì¶ **–î–æ—Å—Ç–∞–≤–∫–∞:**
‚Ä¢ –¢–∏–ø: {delivery_type_name}
‚Ä¢ –í–µ—Å: {weight} –∫–≥
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ —Å–∫–ª–∞–¥–∞: ‚Ç¨{delivery_cost_to_warehouse:.2f}
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏: ‚Ç¨{delivery_cost_from_germany:.2f}

üí≥ **–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:** {payment_method_name}

üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**
‚Ä¢ ID: {user_info.get('user_id', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ Username: @{user_info.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –ò–º—è: {user_info.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –§–∞–º–∏–ª–∏—è: {user_info.get('last_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üõí **–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ ({len(cart_items)} —à—Ç.):**
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        for i, product in enumerate(cart_items, 1):
            price_without_vat = product.get('original_price_without_vat', 0)
            price_with_vat = product.get('original_price', 0)
            
            manager_message += f"""
{i}. **{product.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}**
   üí∞ –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞: {product.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
   üíµ –ë–µ–∑ –ù–î–°: ‚Ç¨{price_without_vat:.2f}
   üí∂ –° –ù–î–°: ‚Ç¨{price_with_vat:.2f}
   üîó –°—Å—ã–ª–∫–∞: {product.get('link', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
"""
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–æ–≤–∞—Ä—É, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if product.get('product_features'):
                manager_message += f"   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {product['product_features']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
        manager_message += f"""
üí∞ **–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:**
üíµ **–¢–æ–≤–∞—Ä—ã –±–µ–∑ –ù–î–°:** ‚Ç¨{total_products_without_vat:.2f}
üí∂ **–¢–æ–≤–∞—Ä—ã —Å –ù–î–°:** ‚Ç¨{total_products_with_vat:.2f}
üöö **–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ —Å–∫–ª–∞–¥–∞:** ‚Ç¨{delivery_cost_to_warehouse:.2f}
üì¶ **–î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏:** ‚Ç¨{delivery_cost_from_germany:.2f}
üíº **–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ (15%):** ‚Ç¨{service_commission:.2f}
üí∂ **–ò–¢–û–ì–û:** ‚Ç¨{total_cost:.2f}

üìÖ **–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

üí¨ **–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º:** https://t.me/{user_info.get('username', '')}
        """
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ aiogram –±–æ—Ç–∞
        try:
            from bot import bot
            await bot.send_message(
                chat_id=manager_id,
                text=manager_message,
                parse_mode="Markdown"
            )
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id}")
            return True
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ aiogram: {e}")
            
            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ requests
            try:
                import requests
                bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
                if bot_token:
                    response = requests.post(
                        f"https://api.telegram.org/bot{bot_token}/sendMessage",
                        json={
                            "chat_id": manager_id,
                            "text": manager_message,
                            "parse_mode": "Markdown"
                        },
                        timeout=10
                    )
                    if response.status_code == 200:
                        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ requests –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id}")
                        return True
                    else:
                        logging.error(f"–û—à–∏–±–∫–∞ requests API: {response.status_code} - {response.text}")
                        return False
                else:
                    logging.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
            except Exception as e2:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ requests: {e2}")
                return False
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")
        return False

async def save_order_to_local_file(order_data: dict, user_info: dict, cart_items: list) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (fallback –µ—Å–ª–∏ Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
    
    Args:
        order_data: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        user_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        cart_items: –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
    """
    try:
        import json
        from datetime import datetime
        
        logging.info("–ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª")
        
        if not cart_items:
            logging.error("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        first_product = cart_items[0]
        delivery_type_code = first_product.get('delivery_type_code', 'small_package')
        weight = first_product.get('weight', 1.0)
        payment_method = order_data.get('payment_method', 'card')
        
        logging.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç–∞–≤–∫–∏: —Ç–∏–ø={delivery_type_code}, –≤–µ—Å={weight}, —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã={payment_method}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
        from price_calculator import get_delivery_type_name, get_delivery_cost
        
        delivery_type_name = first_product.get('delivery_type', '–ú–∞–ª–µ–Ω—å–∫–∏–π –ø–∞–∫–µ—Ç')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        delivery_cost_to_warehouse = 5.00
        delivery_cost_from_germany = get_delivery_cost(delivery_type_code, weight)
        payment_method_name = "–ö–∞—Ä—Ç–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞" if payment_method == "card" else "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã
        total_products_without_vat = sum(product.get('original_price_without_vat', 0) for product in cart_items)
        total_products_with_vat = sum(product.get('original_price', 0) for product in cart_items)
        subtotal = total_products_without_vat + delivery_cost_to_warehouse + delivery_cost_from_germany
        service_commission = round(subtotal * 0.15, 2)
        total_cost = round(subtotal + service_commission, 2)
        
        logging.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å—É–º–º—ã: —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –ù–î–°={total_products_without_vat}, —Å –ù–î–°={total_products_with_vat}, –∏—Ç–æ–≥–æ={total_cost}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        order_record = {
            'order_id': int(datetime.now().timestamp()),
            'date': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
            'customer': {
                'name': order_data.get('name', ''),
                'phone': order_data.get('phone_number', ''),
                'email': order_data.get('email', ''),
                'address': order_data.get('address', ''),
                'comment': order_data.get('comment', ''),
                'delivery_type': delivery_type_name,
                'weight': f"{weight} –∫–≥",
                'payment_method': payment_method_name,
                'delivery_cost_to_warehouse': f"‚Ç¨{delivery_cost_to_warehouse:.2f}",
                'delivery_cost_from_germany': f"‚Ç¨{delivery_cost_from_germany:.2f}"
            },
            'user_info': {
                'telegram_id': user_info.get('user_id', ''),
                'username': user_info.get('username', ''),
                'first_name': user_info.get('first_name', ''),
                'last_name': user_info.get('last_name', '')
            },
            'order_summary': {
                'items_count': len(cart_items),
                'total_products_with_vat': total_products_with_vat,
                'total_products_without_vat': total_products_without_vat,
                'delivery_type': delivery_type_name,
                'weight': f"{weight} –∫–≥",
                'delivery_cost_to_warehouse': delivery_cost_to_warehouse,
                'delivery_cost_from_germany': delivery_cost_from_germany,
                'service_commission': service_commission,
                'total_cost': total_cost
            },
            'cart_items': cart_items  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É orders –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs('orders', exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        filename = f"orders/order_{order_record['order_id']}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(order_record, f, ensure_ascii=False, indent=2)
        
        logging.info(f"–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {filename}")
        return True
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {e}")
        return False

async def process_order_completion(order_data: dict, user_info: dict, cart_items: list, order_id: int = None, calculation_comment: str = '') -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)
    
    Args:
        order_data: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        user_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        cart_items: –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
        order_id: ID –∑–∞–∫–∞–∑–∞ (timestamp)
        calculation_comment: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞—Å—á—ë—Ç–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
    """
    success = True
    errors = []
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
    try:
        local_success = await save_order_to_local_file(order_data, user_info, cart_items)
        if not local_success:
            errors.append("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª")
            success = False
        else:
            logging.info("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª")
    except Exception as e:
        errors.append(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {e}")
        success = False
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {e}")
        
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Google Sheets (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    try:
        sheets_success = await save_order_to_sheets(order_data, user_info, order_id, calculation_comment)
        if sheets_success:
            logging.info("–ó–∞–∫–∞–∑ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Sheets")
        else:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Google Sheets, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ")
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ Google Sheets (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ): {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    try:
        manager_success = await send_order_to_manager(order_data, user_info, cart_items)
        if not manager_success:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ")
        else:
            logging.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ): {e}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏
    if errors:
        logging.error(f"–û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {', '.join(errors)}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
    return success



